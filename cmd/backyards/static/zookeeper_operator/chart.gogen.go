// Code generated by vfsgen; DO NOT EDIT.

package zookeeper_operator

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Chart statically implements the virtual filesystem provided to vfsgen.
var Chart = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 1, 1, 0, 1, 0, 0, time.UTC),
		},
		"/.helmignore": &vfsgen۰CompressedFileInfo{
			name:             ".helmignore",
			modTime:          time.Date(2019, 1, 1, 0, 1, 0, 0, time.UTC),
			uncompressedSize: 333,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\xc1\x6a\x23\x31\x0c\x86\xef\x7a\x8a\x7f\x99\xcb\xee\xb0\x78\x1e\x22\xd9\xc3\x9e\x5a\x48\xc9\xb5\x78\x66\x14\x5b\x89\x47\x36\xb6\x26\x69\x7b\xe8\xb3\x97\x24\x84\xf6\xf2\x81\x3e\x24\xf1\x75\x78\xf6\x66\x5c\xb5\xc1\x32\x24\x68\xae\x8c\x4b\x64\xc5\xb8\x4a\x9a\x45\x03\x8a\x9f\x4e\x3e\x70\x73\xd4\xe1\x25\x4a\x43\x5b\x4b\xc9\xd5\x1a\x5a\xe4\x94\x10\x52\x1e\xb1\x78\x9b\xa2\x68\xf8\x8b\xca\xc9\x9b\x9c\x19\xc5\x5b\xfc\xe1\xbd\xce\xd4\x41\x39\x78\x93\xac\xf8\x5d\x2a\x1f\xe4\x8d\x67\x5c\xc4\x22\x7e\xfd\x71\x78\xd2\xf4\x8e\xac\xb7\xcb\x6b\x12\x0a\x57\x24\x51\x76\xe4\xb6\xbb\xd7\x9d\xe5\xca\xd4\x61\x93\x97\x25\x2b\xf6\x9b\x1d\x66\xa9\x8d\x5c\x10\x1b\x6e\xbc\xe7\x93\x1b\x3f\xea\x70\xe3\x43\xc4\x30\x5c\xf1\x18\xdb\x59\x87\xef\x47\xa3\x9f\x4e\x6b\xc1\x41\x12\x37\xea\x5d\xbb\x14\xea\xdd\xe8\x4f\xd4\x3b\x5b\x0a\xf5\x9f\xd4\x61\xef\xab\xe4\xb5\xe1\xff\xf6\x5f\x23\x57\x6a\x3e\xf2\x64\xe4\x64\x66\x3f\xdc\xf7\x6a\x3e\xd2\x57\x00\x00\x00\xff\xff\xbc\x5b\x94\x77\x4d\x01\x00\x00"),
		},
		"/Chart.yaml": &vfsgen۰CompressedFileInfo{
			name:             "Chart.yaml",
			modTime:          time.Date(2019, 1, 1, 0, 1, 0, 0, time.UTC),
			uncompressedSize: 288,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\x3d\x4e\xc4\x40\x0c\x85\x7b\x9f\xc2\x17\xc8\x0f\x5b\x4e\x85\xa0\x41\xa2\xa1\xa2\xa0\x73\x12\xef\x8e\xb5\x99\xf1\xc8\xe3\x04\xb1\xa7\x47\xc9\x4a\xa1\x60\x4b\x7f\x7e\x7a\x9f\x4d\x45\x3e\xd9\xaa\x68\x0e\xb8\x3e\x01\x95\x72\x8c\x7d\x7b\x6a\x7b\x98\xb8\x8e\x26\xc5\x77\xf4\x61\xb4\xf2\x85\xf0\x4b\xf5\xca\x5c\xd8\x1a\x2d\x6c\xe4\x6a\xf8\xc6\x73\xc2\x31\x92\x39\x9e\xd5\xf0\x7d\x19\xd8\x32\x3b\x57\x88\x9a\x38\x60\x74\x2f\x35\x74\xdd\x45\x3c\x2e\x43\x3b\x6a\xea\xca\xbd\xad\xbb\xfd\x6b\x83\x2b\xff\x7c\xab\x4d\x35\x40\x83\x07\x6c\xf0\x48\x42\x22\xc9\x4e\x92\xd9\xf6\x0c\x27\x92\x39\xa0\xe4\xb3\x3e\x0f\x94\x6f\x24\xe3\xac\xcb\xb4\x69\x00\x31\xd3\x76\xc1\xcb\xce\xf1\x75\x5b\xc0\x1d\x3d\x30\xaf\x7f\xef\xf7\xed\x09\x7e\x03\x00\x00\xff\xff\x53\x0b\x0e\x37\x20\x01\x00\x00"),
		},
		"/README.md": &vfsgen۰CompressedFileInfo{
			name:             "README.md",
			modTime:          time.Date(2019, 1, 1, 0, 1, 0, 0, time.UTC),
			uncompressedSize: 1872,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\xc1\x6e\xe3\x36\x10\xbd\xeb\x2b\x1e\x90\x1e\x36\x40\x2c\x27\x0d\x7a\x31\xf6\x52\x24\x2d\xb0\x28\xb0\x1b\x74\x17\x3d\xb4\x28\xe0\x11\x39\x92\x06\xa1\x48\x95\xa4\xec\x3a\x55\xff\xbd\x20\x65\xd9\x0a\x92\x2e\x36\x3e\x89\xc3\xe1\xe3\xbc\xf7\x86\xe3\x0b\xfc\xee\xdc\x23\x73\xcf\x7e\xe5\x7a\xf6\x14\x9d\xc7\x5d\x4b\x3e\x16\xc5\x1f\xa7\xad\x3f\xdf\xb5\x31\xf6\x61\xb3\x5e\x3f\xcd\xa1\x92\x7a\x52\x2d\x97\xce\x37\xeb\x4b\x48\x00\x41\xb1\x8d\x9e\x8c\x3c\xb1\x46\x60\xbf\x13\xc5\xa8\x9d\x47\x47\x62\x23\x89\x15\xdb\x40\x39\x5b\x4b\x33\x78\x8a\xe2\x2c\xc4\xd6\xce\x77\xf9\xfb\x0a\x96\x3a\xb1\xcd\x15\x7a\xef\x76\xa2\x53\xb2\x96\x10\xbd\x54\x43\x4c\x80\x07\xab\x5a\xef\xac\x3c\x1d\xd3\xc9\xea\x45\x6a\xe3\xdd\xd0\xcf\xb7\x86\xb2\x28\xbe\xb4\x12\xa0\x12\x11\x88\x0d\x91\x8c\x09\x38\x13\xc2\xa7\x23\xd7\x33\xb3\x46\x62\x3b\x54\xa5\x72\xdd\xba\xf7\xb4\xe3\x86\xce\x64\x4f\xd2\x5c\x5e\x61\xdf\x8a\x6a\xa1\xc8\xce\xb8\x67\x05\x71\x5b\xfe\x00\x65\x86\x10\xd9\x97\x45\x71\x71\x31\x29\x89\x7b\x8e\x24\x26\xe4\xc8\x87\xe9\x50\xaa\x39\xb6\x3c\x4b\xfd\xc5\x9d\xd0\x52\x34\xd7\xbd\x29\x8a\xed\x76\x5b\x7c\x87\x96\x4d\x07\xcf\xbd\x03\x69\x8d\x8a\xec\x13\x89\x32\x6e\xd0\xab\x10\xa9\x32\x8c\x44\x61\xb3\x5e\x3f\x0e\x15\x7b\xcb\x91\xc3\x2a\x03\x84\x72\x91\x9b\x89\x55\x9e\xac\x6a\xd7\x1d\xa5\x0a\x67\xe4\xf9\xe2\x97\xc0\xaf\x08\x90\x4b\xca\xcc\x96\x46\x26\xb9\x93\xd7\xc6\xb8\x7d\x66\x96\x4e\x07\x18\x09\x31\x4c\x84\xe6\xec\x54\x6e\x4f\x9e\x3a\x8e\xec\x03\x5c\x9d\xb7\x97\xbe\xd0\xd4\x83\x93\x75\xc9\xe4\xd8\xb2\x78\x68\xae\x69\x30\x11\x3b\x32\x43\x36\x78\xc4\xc3\x8c\x83\x11\xbf\xf2\x5f\x83\x78\xd6\x18\x71\xcf\x41\x79\xe9\x73\x83\xa5\xd5\xe2\x1c\xc6\x62\xc4\x6a\xfe\xe1\xfc\xbd\xf8\x7c\xb1\x4a\xeb\x62\x4c\x06\x18\x51\x74\xe7\x06\x1b\x31\xe2\xc0\x01\x23\x74\xbe\xab\xe2\x80\xd6\xed\xd1\x91\x3d\xa0\x77\x3a\x20\xb4\x6e\x30\x1a\x2d\x59\x6d\x38\x53\xdc\x3b\xff\x68\x1c\x69\xbc\xfb\xe8\x22\xa3\x62\x45\x43\xe0\x24\x00\xa1\x1a\x1a\x88\x3d\xf5\x24\x3e\xdf\xff\x82\x1d\xfb\x90\x18\x5c\x97\xb7\xe5\x35\x9c\x35\x07\xdc\x60\x2f\xc6\x64\xa4\x4b\x8c\xb8\xc9\x65\x49\x47\x0d\x97\xa9\x3b\x82\x44\xe7\x0f\xaf\x94\x96\xae\xcf\x69\x78\x96\xf6\xff\x5d\xbe\x00\x8e\xd4\x7c\x15\x71\xda\xbf\x2e\xbf\x2f\xaf\x17\xa7\xfa\xc1\x98\x07\x67\x44\x7d\xbd\x9c\x67\x69\x1f\xea\x8f\x2e\x3e\x78\x0e\x9c\xf4\x4d\x82\x57\xa4\x4a\xb6\xa9\x65\xf4\x2b\x30\x32\xb5\x4e\xca\x4a\xe3\x67\x4e\x14\x3b\x35\xdc\xf4\x0a\x31\x22\xfa\xa3\xef\x19\x8f\x7a\x99\x95\x7d\x09\x99\xb1\xa8\x17\x9c\x53\x76\x37\x15\x47\xba\x39\x76\x40\x70\x83\x57\xf9\x90\x75\x58\x06\xd2\x38\xa8\x18\xa1\x67\x25\xb5\xb0\x46\x74\x38\xa9\x99\x3b\x62\xc4\x3f\xff\x66\x14\xeb\x34\x7f\x66\xc3\x2a\x0b\x3d\x01\x3d\x8b\xbd\x01\x2b\x3a\xc3\xd3\x0b\x3c\xd5\xb4\x0c\xbd\x01\x89\xea\x5a\xac\xc4\xc3\x0c\x73\x5a\x7f\x33\xc6\x72\xba\x2d\x1e\xf4\xdd\x64\xc4\xb3\x11\x47\x8b\xfd\xd9\xa8\xbd\xc4\x16\xb7\x59\x89\x70\x9c\x7c\x69\x9e\xa9\x68\xa0\x3c\x53\x64\xac\x6a\xac\xf0\xfe\xfd\x4f\x9f\x7e\x2e\xa8\x97\xdf\x26\x8b\x36\x38\xff\x23\x1d\x1b\xba\x14\xb7\x3e\xda\x56\x3c\x8a\xd5\x9b\xf3\x6d\x73\x31\x1d\x47\xd2\x14\x69\x53\x20\xfd\xed\xf0\x06\xfc\x37\x75\xbd\xe1\xd5\x09\xed\x58\x57\x91\x88\xa7\xb4\x0b\xfc\xa8\x35\x6a\x61\xa3\x03\x5a\xf6\x5c\x60\x1e\x09\x61\x83\xdb\x22\x95\xb5\xdd\x6e\xff\x0b\x00\x00\xff\xff\x2b\x49\x87\xfe\x50\x07\x00\x00"),
		},
		"/templates": &vfsgen۰DirInfo{
			name:    "templates",
			modTime: time.Date(2019, 1, 1, 0, 1, 0, 0, time.UTC),
		},
		"/templates/_helpers.tpl": &vfsgen۰CompressedFileInfo{
			name:             "_helpers.tpl",
			modTime:          time.Date(2019, 1, 1, 0, 1, 0, 0, time.UTC),
			uncompressedSize: 1078,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xc1\x6a\xdc\x30\x10\xbd\xfb\x2b\x06\xd1\x40\x9b\x62\xe7\x50\xe8\x61\x21\xa7\xb4\x87\x52\x48\xa1\x81\xf4\x58\x64\xfb\xa9\x3b\x54\x96\x5d\x8d\xb4\xcd\x36\xc9\xbf\x17\x49\x8e\x77\x37\xb0\xb0\x7b\x1b\xe4\x37\x6f\xde\x7b\x33\x7e\x7c\xbc\xba\xa4\x0d\x0f\x2b\x12\x04\x32\x6c\x11\xb6\x13\xae\x87\x28\x41\x77\x6b\xac\xe8\xf2\xea\xf9\xb9\x4a\xa8\xea\xf3\xc3\xa4\x5d\x4f\x61\x0d\x72\x7a\x00\x8d\x26\xd7\xdd\x5a\xfb\xd0\x54\x33\xae\xa6\x1e\x86\x1d\x48\xfd\x1b\xc7\xdf\xc0\x04\x5f\x8f\x13\xbc\x0e\xa3\x6f\x52\x9b\xa2\x7a\x07\xd4\xd1\x06\x6a\x6e\x32\xc3\x6d\xe2\x6c\xee\xb5\x8d\x90\x8c\xfc\xb6\x81\xf7\xdc\x83\x9e\x28\xf8\xe8\x3a\xfa\xf8\x21\x97\x3c\xdc\x45\x63\xf8\x81\x54\xbd\x23\x83\xeb\x73\x5d\xa4\xde\x78\xe8\x00\xd2\xcb\x0c\x13\xad\xdd\xd2\x9f\xa8\x2d\x1b\x46\x4f\x7a\x9a\xb2\x89\xa6\xfa\x81\xc2\x9e\xf1\x21\xcd\x48\x86\x84\x5a\x74\x3a\x0a\x48\xc6\x01\xf4\x35\xb6\xf0\x0e\x01\x52\xac\x1b\x86\xed\x85\xb4\x07\x59\x1e\x38\xa0\xa7\x30\x52\x58\xb3\xd0\xdb\x76\x9b\x63\xf9\x74\x7b\x97\xb0\xec\x7e\x91\x4c\xe8\xde\x35\xd5\x17\x43\x1e\x16\x5a\xe6\xfc\xba\xd1\x05\xcd\x4e\x4a\x82\xe5\x8d\x03\xfd\x65\x6b\xa9\x05\x45\x49\x3a\x85\x74\x16\x3f\xab\x3d\x25\xe5\x04\x3f\x4c\x9a\xcd\x12\xec\xcb\xc7\x25\xdc\x17\xcc\x51\xc0\x49\xe9\x5b\xd9\x31\xbd\xc9\x4e\x56\xd7\xa7\x2f\x78\x4f\xe7\x12\x4a\x61\x69\xbe\x97\xc4\x4a\xf3\xa2\xf5\xe0\xf5\x6c\x81\x93\x67\x17\x0c\xa9\x0b\xa9\x2f\x44\xbd\x62\x2b\x73\xcf\x39\xb9\x63\xf5\xc1\x29\xee\xed\x38\xfd\x44\x1b\x78\xe1\xd1\xa5\xfd\xe6\x3d\xcf\x47\x53\x50\x56\xb7\xb0\xa7\xed\x3a\x37\xa8\xa3\xce\xf6\x83\x2f\xf5\xfd\x3c\xf8\x89\x3c\x26\xab\x3b\x90\x7a\xaf\x48\xfd\x54\x67\x59\xfe\x1f\x00\x00\xff\xff\xb8\x78\x9b\xa6\x36\x04\x00\x00"),
		},
		"/templates/crd.yaml": &vfsgen۰CompressedFileInfo{
			name:             "crd.yaml",
			modTime:          time.Date(2019, 1, 1, 0, 1, 0, 0, time.UTC),
			uncompressedSize: 1260,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\xc1\x6e\xdb\x30\x0c\x86\xef\x7e\x0a\x22\xf7\x6a\xe8\x6d\xf0\x6d\xcb\x7a\xd8\xd6\x65\x45\x5a\xec\xb0\x1b\x23\xb1\x8e\x10\x59\x12\x28\x2a\x4b\x1a\xe4\xdd\x07\xcb\x76\xea\x36\xc9\x69\x3b\xda\xfc\x7f\xf2\x23\x45\x10\xa3\xfd\x45\x9c\x6c\xf0\x35\x60\xb4\xb4\x13\xf2\xdd\x57\x52\x9b\x8f\x49\xd9\xf0\x61\x7b\xbb\x22\xc1\xdb\x6a\x63\xbd\xa9\x61\x9e\x93\x84\x76\x49\x29\x64\xd6\xf4\x85\x9e\xad\xb7\x62\x83\xaf\x5a\x12\x34\x28\x58\x57\x00\x1e\x5b\xaa\xe1\x25\x84\x0d\x51\x24\xd6\x2e\x27\x21\x4e\xea\xf4\x47\x45\xc6\x2d\x35\xa8\x6c\xa8\x00\x1c\xae\xc8\xa5\xce\x08\x80\x31\xd6\x30\x3b\x1c\x40\xa8\x8d\x0e\x85\x60\x76\x72\xdd\x84\x48\x8c\x12\x58\x3d\x67\xe7\xba\x22\x33\x50\x70\x3c\xce\x8a\x53\xaf\x91\xa5\xf7\x5a\xaf\x5d\x36\x97\xad\x45\x36\xf5\x31\x39\xc2\x44\xbd\x53\x2d\xfb\x2f\xb5\xc0\x96\x4e\x92\x35\xb1\x15\x6c\xde\x6b\x1e\x89\xb7\x56\xf7\xb2\x14\x49\x77\x1d\x34\x1c\x72\x9c\xf4\xfe\xb6\xd3\x8e\x79\x68\xb4\x1f\xe7\xef\x51\x37\xef\x67\x54\x42\xce\x26\xf9\x7e\x31\x7c\x6f\x93\x14\x49\x74\x99\xd1\x5d\x98\x71\x89\x26\xeb\x9b\xec\x90\xcf\xe3\x7d\x78\x1d\x58\x16\xaf\x28\x00\x37\xf0\xb2\xa9\x00\xd0\x98\xf2\x98\xe8\x1e\xd8\x7a\x21\x9e\x07\x97\x5b\x5f\x64\x37\xc3\xab\xfe\xa0\x76\x35\xd6\x91\x7d\xa4\x1a\x3a\x65\x33\xa4\x36\x94\x34\xdb\x28\x65\x9d\x9e\xd6\x04\x3e\x77\xf2\x57\x0e\x68\x7b\x3f\x70\xf6\xde\xfa\xa6\xb8\xbe\x3d\xfe\x5c\x3c\xa0\xac\x6b\x50\x49\x50\x72\x52\x4c\xd1\x59\x8d\x69\x52\x78\x49\x68\xf6\xff\xaf\x7c\x97\xed\x6a\x71\x34\xfb\xe5\x39\xc1\xd7\x6e\x24\x1e\x1d\xdc\x79\x13\x83\xf5\x32\xa1\x48\xc2\x63\x37\x6f\x20\xe6\xce\x92\x17\xa0\xc1\x51\x68\x4b\x0e\x09\x30\xbc\x09\x78\x92\x3f\x81\x37\x57\x68\x46\x47\x9f\x69\x52\x7a\xc4\xba\xdb\xfd\x3b\x16\xed\xae\x62\xc1\xd6\x22\xdc\x07\x34\x9f\xd1\xa1\xd7\xc3\xa4\xcf\x39\xc7\x14\x57\x39\x3f\x35\x34\x21\x33\x28\xf4\x3e\xd3\x78\x43\x94\x66\xc2\x0e\xf4\xc9\xb6\x94\x04\xdb\x58\x01\x24\x1d\x3a\x5f\xd9\xdb\x88\x9a\x4c\x05\xb0\x1d\x2f\xd7\x78\xa4\x00\x52\x5e\xf1\x70\x9d\x86\xf5\xee\xf9\x6a\x38\x1c\xff\x06\x00\x00\xff\xff\x49\xd5\x2b\xf2\xec\x04\x00\x00"),
		},
		"/templates/deployment.yaml": &vfsgen۰CompressedFileInfo{
			name:             "deployment.yaml",
			modTime:          time.Date(2019, 1, 1, 0, 1, 0, 0, time.UTC),
			uncompressedSize: 1809,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x41\x6f\xdb\x3c\x0c\xbd\xe7\x57\x10\xb9\xc7\x5f\xfa\x1d\x86\xc1\xb7\x20\xed\xb0\xc3\xd6\x1a\x49\xd1\x61\xa7\x81\x91\xe9\x46\xa8\x2c\x69\x12\x9d\x21\x4b\xf3\xdf\x07\x45\x8e\x2d\x2f\x39\x34\xcd\x74\x7c\xe2\xe3\x23\xf9\x28\xa1\x95\x4f\xe4\xbc\x34\x3a\x07\xb4\xd6\xff\xb7\xb9\x19\xbd\x48\x5d\xe6\x70\x4b\x56\x99\x6d\x4d\x9a\x47\x35\x31\x96\xc8\x98\x8f\x00\x34\xd6\x94\xc3\x6e\x07\x4c\xb5\x55\xc8\x04\xe3\xdf\xc6\xbc\x10\x59\x72\x13\x63\xc9\x21\x1b\x97\x55\x8d\x52\x21\x72\x0c\x19\xec\xf7\x2d\xcd\x5b\x14\x91\x9b\x2d\x48\x11\x7a\xca\xee\x8f\x30\xbc\xc2\xcf\xc6\x30\xc5\x68\x85\x2b\x52\x3e\xc8\x41\xa8\x2a\x87\xf1\x65\x82\xe3\x03\x53\xac\xd1\x71\xe4\x4a\x2d\x54\x53\x9e\xa7\x1e\xc2\x52\x9e\x8b\xc5\x45\xe6\xa0\xd4\x2e\x64\x4d\x4e\x32\x3e\xff\x1d\xb3\x24\xb7\x91\x22\x86\x79\x4b\x22\x74\xe0\xc8\x2a\x29\xd0\xc7\xc6\x9f\x50\x35\xe4\xb3\x16\x9c\x9b\x46\x73\x6c\xd9\x93\x22\xc1\xc6\xc5\xa6\x6b\x64\xb1\xfe\x92\x4c\xa1\x9d\xc3\xc5\x73\x1f\xf4\x73\xa6\x9d\x11\x74\x09\x5b\xe5\xc4\xeb\x70\xd4\xa0\x88\x6b\xec\xb8\xc6\x92\x37\xda\xf2\x46\x6b\x42\x58\xb4\x67\xb7\x9b\x80\xac\x7a\x5b\x56\x28\x32\xd2\xb8\x52\x54\xf6\xf3\xf3\x91\x3a\x13\x22\xd8\x75\xff\x9e\x07\x10\x74\x48\x27\x39\x85\xd1\x8c\x52\x93\xeb\x46\x3b\xe9\x9f\x56\x36\x0f\xfd\x27\x16\xc5\x23\xeb\xbe\xad\xb6\xe0\x03\x14\xb6\xc9\x78\xc9\xc6\x6d\x61\xbf\xcf\x4f\xae\x19\x9f\x07\x13\x3a\xa0\x45\xa3\x54\x61\x94\x14\xdb\xc1\x62\x46\x86\xed\x2e\x53\x7d\x6b\x1c\x27\x9b\x30\xe9\x9b\x28\x4c\x70\xf5\xc3\x74\x3a\x9d\x76\xd7\xc7\xaf\xa2\x26\x76\x52\xf8\x0e\x27\xbd\x49\x73\xc4\xa0\x6f\xb3\xc7\xf9\xe7\x1f\xf7\xb3\xaf\x77\xcb\x62\x36\xbf\x4b\x92\x6c\x42\x5d\x9f\x9c\xa9\xf3\x04\x04\xa8\x24\xa9\x72\x41\xd5\x10\x6d\xf1\x02\x79\x9d\x77\x9b\x9c\x75\x7f\xcf\x89\x6c\xf1\x70\x7b\x10\xfd\xf7\x7a\x27\x52\x0f\xc5\xdd\x62\xf6\xf8\xb0\x38\xab\xf7\xce\x87\x1d\xde\x84\x37\x8d\x13\xe4\xc3\x2a\x03\x9b\xef\x58\xab\xe4\x93\x69\x2f\xe1\x15\xa4\x2e\x49\x33\xdc\xfc\x7f\x64\x87\x8d\xfc\x25\x79\xdd\x45\x6b\x53\xd2\xb2\xfd\x84\x7a\x89\x14\x1d\x68\xf4\x39\x3f\xa6\x29\x93\x25\x3f\x51\xc0\xaa\x92\x5a\x72\xb2\x53\x47\xe4\xda\xcc\x6c\x54\x98\x93\x34\xda\xf7\xc9\x13\xf0\x82\xfc\x7f\x02\x00\x00\xff\xff\x3e\x50\x49\x2f\x11\x07\x00\x00"),
		},
		"/templates/rbac.yaml": &vfsgen۰CompressedFileInfo{
			name:             "rbac.yaml",
			modTime:          time.Date(2019, 1, 1, 0, 1, 0, 0, time.UTC),
			uncompressedSize: 1846,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x54\xc1\x8e\xd3\x30\x10\xbd\xe7\x2b\x86\x88\x13\x52\x82\xb8\xa1\x48\x1c\x16\x0e\xdc\x38\x14\x69\xef\x13\x7b\xda\x9a\x3a\xb6\x77\x6c\x47\xea\x1a\xff\x3b\x8a\x93\x96\x76\x5b\xba\xcb\x09\x89\xbd\x65\x32\x6f\xc6\xef\xcd\x3c\x3b\x25\x50\x6b\x68\xef\x51\x47\xf2\x2d\xf7\x28\x5a\x32\xd8\x6b\x92\x90\x73\x95\x52\x03\x6f\x3d\xf1\xa8\x04\x7d\xc3\x81\xa0\xfb\x04\xca\x08\x1d\x25\x41\xfd\x68\xed\x8e\xc8\x11\x37\xd6\x11\x63\xb0\xdc\xae\xa3\xd6\x06\x07\xaa\xa1\x85\x26\xe7\x0a\x9d\xba\x27\xf6\xca\x9a\x0e\x4a\x6f\x8c\x61\x6b\x59\x3d\x62\x50\xd6\xb4\xbb\x8f\xbe\x55\xf6\x7d\x4a\xc0\xf4\x10\x15\x93\x84\xfa\x0e\x46\xd4\x4a\x9e\x53\xfa\xdd\x07\xc8\x04\xde\x1f\xf1\x6f\xea\x3f\x02\x73\xae\x76\xca\xc8\x0e\xbe\xe8\xe8\x03\xf1\xca\x6a\xaa\x06\x0a\x28\x31\x60\x57\x01\x4c\x44\x3b\x48\xe9\x5c\x61\xce\x15\x80\xc6\x9e\xb4\x9f\x40\x00\xe8\x5c\x07\x75\x4a\x10\x68\x70\x1a\xc3\xf3\xca\x73\xae\x4b\xa5\xd8\x22\x87\xb9\xf6\xd6\xd0\x0a\xec\xb4\x8e\x49\x13\x7a\x9a\x2b\xdb\xd5\x1c\xb5\x0b\xbb\x19\xb2\x25\x56\x01\x37\x4f\x31\xdf\x67\x21\x05\xc6\x51\x93\xef\xaa\x06\xd0\xa9\xaf\x6c\xa3\x2b\x7a\x1a\x38\x32\x68\x1d\xe3\x48\x1b\x6c\x95\xad\xa6\x43\xbd\x8d\x2c\x68\x41\xd5\xef\xa6\x83\x46\xe2\xfe\xe4\xc7\x45\xaf\xba\xbe\xac\x74\x56\xfa\xf2\xb1\x4c\x75\x0e\xc8\x48\x67\x95\x09\x73\xe4\xa6\x1d\xf9\x40\x26\x8c\x56\xc7\x81\x84\x46\x35\x2c\xc0\x91\x0e\x28\x61\xcd\x5a\x6d\x06\x74\x87\x7e\x82\xa9\xa4\x9e\xa3\x85\xae\x94\x3c\x21\x26\xc9\x69\xbb\x1f\x8e\xed\x25\xd2\x60\x8d\xa7\x25\x64\x72\x5a\x09\x3c\xc6\x3e\x60\xa0\x75\xd4\xfe\x65\x67\x3a\xab\x95\xd8\x5f\x1d\x87\x54\x9e\xa3\x9b\x1c\xdf\x47\xb9\xb9\xde\xae\x69\xaa\x4b\xbb\x7e\x56\x46\x2a\xb3\xf9\xd7\xd7\xe8\x15\x5d\x1a\x1f\xfb\x1f\x24\x42\xb9\x37\xf3\x3a\x96\xec\x9d\x10\x36\x9a\x70\x7b\x02\x53\xca\x3b\x14\x73\xfe\x8c\x44\xf9\x3d\xa1\xd8\x6a\x5a\xd1\x7a\x1a\xd3\xc1\x41\x37\x96\x5a\x01\x5c\x3e\x62\x37\x38\x14\x1f\x9d\xda\x65\xfc\x50\x5d\xd5\x71\x75\xa7\x7f\xb1\xac\x97\xa8\xfd\x09\x0f\xd1\x86\xff\xc8\x1d\x29\x4d\xef\x18\xe4\xfc\x2b\x00\x00\xff\xff\x9e\xf7\x3e\xe4\x36\x07\x00\x00"),
		},
		"/values.yaml": &vfsgen۰CompressedFileInfo{
			name:             "values.yaml",
			modTime:          time.Date(2019, 1, 1, 0, 1, 0, 0, time.UTC),
			uncompressedSize: 799,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xc1\x6e\xd4\x40\x0c\xbd\xcf\x57\x3c\xa9\x87\x5e\xda\xb0\xdb\x13\xca\x0d\xd1\x4b\x25\x8a\x2a\x81\x40\x08\x71\xf0\x4e\x9c\xdd\xa1\x93\x71\xb0\x3d\x5b\x05\xc4\xbf\xa3\xc9\xae\x0a\x88\x0b\xa7\x64\xe4\xe7\xe7\xf7\x9e\x7d\x81\x5b\x1e\xa9\x66\xc7\x91\x72\x65\xc3\x28\x8a\xef\x22\x8f\xcc\x33\xeb\xb5\xcc\xac\xe4\xa2\x5d\xb8\xc0\xfb\x43\x32\x24\x03\xe1\xd3\xab\xfb\x37\xd7\xa3\xe8\x44\xee\x3c\x60\x4c\x99\x1b\xe0\x96\x63\x26\x65\x1c\x49\x13\xed\x32\x1b\x5c\xb0\x63\xcc\x64\xc6\x03\x52\x71\xc1\x22\x55\xe1\x3c\xcd\x99\x9c\xad\x0b\x41\x79\xce\x29\xd2\x6b\xa9\xc5\x7b\x6c\x43\x48\x13\xed\xb9\x0f\x80\xf2\x2c\x96\x5c\x74\xe9\x31\x2b\x1d\x79\x4f\x2f\xfe\x55\x16\x00\xa7\x7d\x8f\x4d\x77\xd3\x6d\x02\x30\xd7\x9c\x1f\x24\xa7\xb8\xf4\xb8\x1b\xdf\x8a\x3f\x28\x1b\x17\x0f\x41\x77\x14\x1b\x2f\x97\x26\x6e\xe8\xe1\x5a\x39\x00\x34\xa7\x0f\xac\x96\xa4\xf4\x38\x6e\x77\xec\xb4\x6d\xb2\x4c\xaa\x46\xb6\x1e\x3f\x7e\x06\xe0\x02\x1f\x19\xd5\x2a\xe5\xbc\x40\x39\xca\x34\x71\x19\x50\xc4\x9b\x49\x9b\x39\xa6\x71\xc1\x70\xce\xf2\xb9\x1b\x54\x86\x06\xc8\x4c\x47\x86\xb7\x04\xa9\x25\x18\xa5\x58\x4c\x52\x6d\xa5\x8e\x07\x49\x91\xd7\xe8\xfd\xd0\xc6\xb0\x76\xa7\xb8\x29\x9b\x20\x95\xa8\x4c\xc6\x86\x78\xa0\x12\x4f\x5f\x75\x83\xd6\x02\x29\xe0\x72\x4c\x2a\x65\xe2\xe2\x86\xa7\xe4\x07\xe4\xe4\x9e\x79\xe5\x7e\x96\x72\x05\xab\xf1\xd0\xc6\xdf\xa7\x92\x1e\xeb\x8e\x3b\xdc\x8d\x6d\x21\x18\x04\x4f\x54\xfe\x72\xf2\x47\x5b\x2d\x27\xb7\xbe\x8a\x1b\x25\x67\x79\x4a\x65\xbf\xb2\xe7\x54\x1a\x84\x86\xaf\xd5\xd6\xfa\xd4\x06\x14\x8e\x6c\x46\xba\x5c\xad\xfe\x95\x27\x59\xdd\x33\x62\xd5\xbc\x60\xa7\xb4\x66\x33\x3a\x2b\x2e\x7f\x47\x7d\xd9\x9d\x49\xa7\xe4\xd6\xaf\xff\x88\x73\xed\xb1\xdd\x6c\xa6\xd3\x73\xe2\x69\x3d\x88\xed\xcd\xcb\xfb\x74\x36\xf8\xad\xb2\xfd\x1f\x3e\x14\x19\xf8\x1d\x67\x8e\x2e\xba\x6e\x36\xb8\xe4\x76\x48\x49\x8a\xf5\xf8\xfc\x25\x04\x1a\xc7\x54\x92\x2f\x6b\xf9\x57\x00\x00\x00\xff\xff\x82\xf8\x85\x3a\x1f\x03\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/.helmignore"].(os.FileInfo),
		fs["/Chart.yaml"].(os.FileInfo),
		fs["/README.md"].(os.FileInfo),
		fs["/templates"].(os.FileInfo),
		fs["/values.yaml"].(os.FileInfo),
	}
	fs["/templates"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/templates/_helpers.tpl"].(os.FileInfo),
		fs["/templates/crd.yaml"].(os.FileInfo),
		fs["/templates/deployment.yaml"].(os.FileInfo),
		fs["/templates/rbac.yaml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
