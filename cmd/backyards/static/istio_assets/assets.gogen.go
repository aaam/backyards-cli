// Code generated by vfsgen; DO NOT EDIT.

package istio_assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 1, 1, 0, 1, 0, 0, time.UTC),
		},
		"/istio.yaml": &vfsgen۰CompressedFileInfo{
			name:             "istio.yaml",
			modTime:          time.Date(2019, 1, 1, 0, 1, 0, 0, time.UTC),
			uncompressedSize: 885,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\x4f\x6f\xdb\x30\x0c\xc5\xef\xfe\x14\x44\xef\x75\xeb\xb5\x87\x4e\xb7\x6c\xcb\xb0\x60\x2d\x10\x2c\xc5\xee\x8c\xcc\x39\x5c\x64\x49\x10\x69\x37\xce\xa7\x1f\x14\x3b\x4e\x86\x0e\xd8\x4d\x7a\x7e\x8f\x7f\x7e\x16\x46\xfe\x49\x49\x38\x78\x03\x2c\xca\xa1\xdc\xa2\x3f\x22\x5b\x17\xba\xba\xe4\x70\xd7\x57\x5b\x52\xac\x8a\x3d\xfb\xda\xc0\x2a\x5b\x8a\x96\x14\x6b\x54\x34\x05\x80\xc7\x96\x0c\xb4\x24\xbb\x42\x22\xd9\x2c\xf5\xe7\x82\x37\x55\xf9\x58\x3e\xdc\x14\x00\xad\x3a\x31\xf0\x0b\x9d\x50\x01\x80\x9d\x86\x97\x93\xa2\xa9\xcb\x42\x8e\x2f\x0f\x11\xfd\x98\x9b\x54\x1b\xbc\xa6\xe0\xd6\x0e\x3d\x6d\xc8\x76\x89\x75\x58\x7a\xdc\x3a\xaa\x67\x8f\x70\x4d\x16\xd3\xca\xff\x26\xab\x21\xe5\xf6\x00\x89\xde\x12\x2b\x2d\x62\xfc\xf6\xfa\xba\x5e\xa7\xb0\xa5\x39\xc0\x2d\x36\xb4\xee\x9c\x5b\x07\xc7\x76\x30\xb0\x70\x6f\x38\x48\x01\xd0\xa0\x52\x3e\x8e\x35\xd8\x37\x89\x64\xba\x00\xb4\x78\xf8\x41\xd1\xb1\x45\x31\x50\x9d\x44\xfa\xcb\x40\xe7\xc1\xce\x4b\x46\x76\x41\xa7\x5a\xb9\xa7\x81\x2b\xb2\x77\x27\xd6\xb7\xa3\x27\x53\xfa\x70\xbb\x3d\xda\x9c\x4a\xe1\x30\x8c\xa9\x4e\xe8\x65\x02\xbd\x3c\xd8\x1d\xfa\x86\xbe\xb2\x53\x4a\xf3\x2e\xb9\x6b\x1f\x86\x85\xb5\x24\xf2\x1c\x9a\x0d\xa5\x9e\x2d\xbd\x1b\x69\xb6\x03\xec\x82\x68\x9e\xc4\xee\x07\x4c\xb5\xdc\xa2\x93\xf2\x72\x93\x41\x94\xda\x52\x7a\x5b\x5a\xd7\x89\x52\x2a\x5d\xb0\xe8\xa6\x70\x0c\x49\x0d\x3c\xdd\x3f\xdd\x4f\x82\xda\xf8\x9d\x28\xa2\xe3\x7e\xee\x9a\xd1\x29\xa5\x1e\x9d\x81\xea\x5e\x66\x35\xe6\xdf\x20\x06\x1e\x66\x45\x39\x3f\x9d\x8b\x47\x9d\x6c\x48\x95\x7d\x23\x97\x62\x6d\xa8\xc9\xc0\x97\xd5\x66\xf1\xe9\x79\x99\x9f\x0a\x1f\x28\xfd\x07\xeb\xe8\xb9\xc6\x0a\xd0\x76\x4e\xf9\xf3\xb8\xd4\xa6\x8b\xe3\x2a\x13\x18\x4d\x68\xd9\x37\xa6\xf8\x37\xb5\xfc\x39\x53\x3f\x72\xdc\xb3\x3f\x49\xe3\xf1\x3c\x25\xd6\xf5\xe9\x29\x5c\x71\x1d\x0d\xef\xd0\x9a\x8f\x8f\x55\x55\xfc\x09\x00\x00\xff\xff\xef\xd2\xa4\xe2\x75\x03\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/istio.yaml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
