// Code generated by vfsgen; DO NOT EDIT.

package istio_assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 1, 1, 0, 1, 0, 0, time.UTC),
		},
		"/istio.yaml": &vfsgen۰CompressedFileInfo{
			name:             "istio.yaml",
			modTime:          time.Date(2019, 1, 1, 0, 1, 0, 0, time.UTC),
			uncompressedSize: 2065,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\x4d\x73\xe3\x36\x0c\xbd\xeb\x57\x60\x7c\xb7\xd6\x4a\x93\xce\x96\x37\x4d\xea\x9d\xba\x8d\x1b\x4d\xac\xcd\x35\x03\x53\x58\x87\x09\x45\x6a\x48\x48\xb1\xb3\xcd\x7f\xef\xe8\xd3\x5a\x7f\xcc\xc4\x37\x11\x7c\x78\x20\xf0\x00\x08\x0b\xf5\x48\xce\x2b\x6b\x04\x28\xcf\xca\x86\x6b\x34\xef\xa8\xa4\xb6\x65\x16\x2a\xfb\xa5\x8a\xd6\xc4\x18\x05\xaf\xca\x64\x02\x16\x35\x24\xc8\x89\x31\x43\x46\x11\x00\x18\xcc\x49\x40\x4e\xfe\x39\xf0\x05\xc9\xda\x54\xf5\x84\x93\x28\xbc\x09\x67\x93\x00\x9a\xfb\xc4\x6a\x25\x77\x35\x00\x20\x67\xed\x97\x36\x23\x01\xc9\xfc\x61\xb9\x58\xad\x16\x8f\xf3\x00\x00\x4b\xb6\x4b\xd6\x5e\x00\xbb\x92\x3a\xbf\xf9\xb6\x40\xd3\x12\x76\x56\x69\x0d\x3b\xab\x13\x8d\x86\x56\x24\x4b\xa7\x78\x37\x37\xb8\xd6\x94\x0d\x18\xaf\x32\x92\xe8\x16\xe6\x85\x24\x5b\xd7\x86\xa5\x1e\xf4\x03\xb5\xa7\xc6\xe4\xe8\xcd\x29\xa6\xb8\x28\xfe\x4a\xd3\x24\x71\x76\x4d\x03\x07\x80\x6a\xdc\x29\xbb\xb5\x86\x51\x19\x72\x71\x96\x29\x56\xd6\xa0\x9e\x9b\xea\x11\x9d\x6f\x89\xa7\x5d\x1d\x16\xab\x74\x71\xff\xb4\x9c\xa7\xf1\xdf\xab\xfb\x7f\x9f\x92\xbb\x38\xfd\x76\xff\xb0\x6c\x2c\x7f\xc6\x69\xdc\x80\x01\x2a\xd4\x25\x09\xf8\xaf\x3b\x02\xfc\x9c\x1c\x41\x27\xe2\xe7\x44\xea\xd2\x33\xb9\x27\x95\x4d\xc4\x24\xc7\xfa\x7b\xf2\xf1\x11\x00\xa8\x1c\x37\x94\x94\x5a\x77\x45\x85\x58\xbf\xe1\xce\xd7\xb5\x51\x8c\x19\xe9\x33\xf9\x6e\x50\x6b\xda\x9d\xbd\x64\xaa\x59\x44\x97\xfa\xc6\x91\xef\x0e\x00\x39\x6e\x1f\xa8\xd0\x4a\xa2\x17\x10\x75\xc6\xc2\x3a\x1e\x10\x7d\x0d\x3c\x23\x97\x7e\x5a\xdf\x0d\xf9\xd5\x07\x01\xd1\xcd\xec\x6a\xb6\xb7\x39\xcb\x56\x5a\x2d\x20\xbd\x4d\x06\x2b\xa3\xdb\x10\x27\x47\xf8\x9e\xfd\x99\xb9\xb8\x3a\xe0\xfd\x7a\x09\xe9\xd7\x53\x8c\xfe\x80\xf1\xfa\xfa\xb7\x0b\x28\xf7\xe8\x9e\x93\xf5\x21\x63\x74\x73\x19\xe7\x18\x3f\xb0\xca\x62\x8a\xda\x4f\x8f\xd9\x6f\x66\xbf\xcf\x2e\x29\xc2\x18\x3f\x66\x7f\x57\xc5\xab\x32\xa7\x02\xfc\x71\x1d\x45\x97\x04\x18\xf0\xf4\x4b\x1b\x1d\x35\x5d\xa1\xb4\xe5\xb3\xd3\x79\xa2\xeb\x9a\xd6\x17\x30\x5a\x53\x5f\x9a\xc5\x35\x6d\x99\x9a\x95\x33\x5d\xbf\xcb\xa0\x79\xe6\xb6\x6b\xf6\xf3\x5e\x35\xa6\xba\xda\xfb\x85\x6d\x98\xd2\xd3\xb2\x5b\x73\xf3\xad\x7c\x46\xb3\xa1\x6f\x4a\x33\xb9\xd1\x76\x20\x53\xd9\x5d\x2c\x25\x79\x7f\x67\x37\x2b\x72\x95\x92\x74\x94\xe9\x00\x07\x78\xb6\x9e\xeb\x47\xc8\xd7\x1d\xba\xcc\xd7\x62\x86\xfb\x93\xdf\x79\xa6\x3c\xf4\x95\x0c\xbb\xc1\x0f\xb5\x95\xa8\x83\x73\x4a\xb3\x2c\xfe\x21\x2a\x50\xab\x6a\x08\x5b\x0f\x2e\x93\xab\x50\x0b\x88\x66\x7e\x2c\xd9\x9a\xbc\x80\x7d\x0f\xb2\xaa\x55\xdf\x63\x58\xfb\x15\x31\x2b\xb3\xf1\x7b\xb2\xbc\x59\xd2\xdd\x5a\xfb\x9e\x7e\x8f\xef\xea\xad\xac\xb6\xd4\x6d\xd4\x4b\x04\x6a\xdd\xc6\x02\x01\xe4\xa5\x66\x75\xdb\x66\xbb\x2a\x8b\x36\xc7\xae\x62\x4c\x9a\x72\x62\x77\x6e\x5f\x9d\x88\x5e\x8c\xfe\x31\x9f\xc1\xb3\x43\xa9\xcc\xe6\xc0\x61\x50\xac\xbe\xae\x15\x6f\xc7\xa2\x31\xb5\x9f\x7d\x81\x30\xcb\x9a\xee\x1e\x69\xda\x02\x3e\x21\xab\x18\xcf\xd4\xe7\x8b\xdf\xd4\x32\x3b\xfd\xe2\x97\x37\xee\x7f\x08\x3f\x94\xf3\x3c\x2d\xd0\xf1\x6e\xfa\xf2\xc6\xbd\x6a\x9a\xbc\x4f\xcf\xd4\xb5\x21\xf9\x3f\x00\x00\xff\xff\x90\xea\x76\x81\x11\x08\x00\x00"),
		},
		"/without-istiod.yaml": &vfsgen۰CompressedFileInfo{
			name:             "without-istiod.yaml",
			modTime:          time.Date(2019, 1, 1, 0, 1, 0, 0, time.UTC),
			uncompressedSize: 1867,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\x51\x6f\xab\x3a\x0c\x7e\xe7\x57\x44\x7b\x87\x95\xdd\xf5\x6a\x97\xb7\x6a\xea\xd5\xad\xee\xaa\x83\x46\xb7\xd7\x23\x37\x78\x34\x5b\x48\xa2\xc4\xd0\xb2\x5f\x7f\x14\xa0\x94\x75\x45\x5a\xf7\x34\xec\xcf\x9f\x1d\x7f\xb6\x0b\x46\xbc\xa2\x75\x42\xab\x84\x09\x47\x42\x47\x5b\x50\x9f\x20\xb8\xd4\x55\x1e\x09\x7d\x5b\xc7\x5b\x24\x88\x83\x0f\xa1\xf2\x84\xad\x3c\x24\x28\x91\x20\x07\x82\x24\x60\x4c\x41\x89\x09\x2b\xd1\xed\x02\x67\x90\x7b\x53\x7d\x24\xbc\x89\xa3\x79\x34\xbb\x09\x58\xeb\x4f\xb5\x14\xbc\xf1\x00\xc6\x4a\x92\x6e\xad\x73\x4c\x58\xba\x7c\x5e\xaf\xb2\x6c\xf5\xba\x0c\x18\x83\x8a\xf4\x9a\xa4\x4b\x18\xd9\x0a\xfb\xb8\xe5\xc1\x80\xea\x08\x7b\x2b\xd7\x8a\xac\x96\xa9\x04\x85\x19\xf2\xca\x0a\x6a\x96\x0a\xb6\x12\xf3\x01\xe3\x44\x8e\x1c\xec\x4a\xbd\x23\x27\x6d\xbb\xb4\x78\x06\x62\xcc\xe2\xde\x0a\xc2\x85\x31\xff\x6d\x36\x69\x6a\xf5\x16\x07\xaf\x28\xa1\xc0\xb4\x92\xb2\xaf\x9c\x2d\xe4\x1e\x1a\xe7\x0b\x10\x04\x39\xca\xcb\xa4\x05\x48\x89\xcd\x94\x8f\xd0\x73\x74\x5e\xa1\x0a\x8b\xae\xff\x60\xac\x84\xc3\x33\x1a\x29\x38\xb8\x84\xc5\xbd\xd1\x68\x4b\x03\x22\xec\xdb\xed\x08\xa8\x72\xa1\xf7\xf5\x9e\x0e\x98\xb0\x78\x3e\xbb\x9b\x9d\x6c\x56\x93\xe6\x5a\x26\x6c\xf3\x98\x0e\x56\x02\x5b\x20\xa5\xdf\xf0\x47\xf6\x1d\x91\xb9\x3b\xe3\x7d\xb8\x86\xf4\xe1\x12\xa3\x3b\x63\xbc\xbf\xff\xeb\x0a\xca\x13\xfa\xc8\x49\xf2\x9c\x31\x9e\x5f\xc7\x39\xc6\x0f\xac\xdc\x84\x20\x5d\xf8\x9d\x7d\x3e\xfb\x7b\x76\x4d\x13\xc6\xf8\x31\xfb\xa7\x30\x1f\x42\x5d\x4a\xf0\xcf\x7d\x1c\x5f\x93\x60\xc0\xe3\x97\x31\x1a\x66\xee\x0d\xa4\xf3\x43\x67\x84\xd4\x34\xb5\x00\x17\x86\xae\x9d\xfb\x84\x8d\x0e\xc1\x6d\x7b\x1a\xc2\x8e\xa8\x5d\xea\x70\xfb\xc9\x83\xb6\xca\x43\x3f\xea\xd3\x51\x1e\x53\xdf\x7d\x89\x63\xac\x72\xb8\xee\xcf\xc8\xf2\xc0\x77\xa0\x0a\xfc\x57\x48\x42\x3b\xaa\x0d\x55\xad\x9b\x05\xe7\xe8\xdc\x93\x2e\x32\xb4\xb5\xe0\x38\xf9\x4c\xff\xb7\xd3\x8e\x7c\x0d\xfc\xa3\x01\x9b\x3b\x2f\x65\x74\xfa\x72\x8d\x23\x2c\x23\x57\xf3\x88\xcb\xca\x11\xda\x48\x6a\x0e\x32\x98\xd2\x99\xb8\xf9\x1f\xd1\x80\x14\xf5\x90\xd7\xaf\x2d\xa1\xad\x41\x26\x2c\x9e\xb9\xb1\x60\x5b\x74\x09\x3b\x4d\x20\x09\xaf\xf9\x09\x43\xd2\x65\x48\x24\x54\xe1\x4e\x64\x65\x7b\x05\x57\xd9\x66\xf5\xeb\xf7\xfa\x65\xf3\xb2\x78\xf2\x67\x4f\x1c\xb0\x3f\x59\xd7\xe8\xd3\x85\x7d\xed\x73\x59\x49\x12\x8f\xdd\x6b\xb3\xca\x74\x6f\xec\x3b\x4c\x28\xb1\x44\xb2\x13\xc7\xea\x42\x72\x33\xba\xe1\x17\x04\xf8\x86\x27\x0b\x5c\xa8\x62\x32\xc0\xfb\xbd\xe4\xdd\x52\xb4\xa6\xee\xdf\x63\x83\x20\xcf\xdb\xd9\x1e\x69\xda\x01\x7e\x20\x6b\x32\xde\xa8\x9f\x37\xbf\xed\x65\x3e\x51\xf2\xfb\x9e\x8e\xbf\x06\x6f\xc2\x3a\x0a\x0d\x58\x6a\xc2\xf7\x3d\x05\x7f\x02\x00\x00\xff\xff\x8d\xa5\xcc\xfc\x4b\x07\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/istio.yaml"].(os.FileInfo),
		fs["/without-istiod.yaml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
