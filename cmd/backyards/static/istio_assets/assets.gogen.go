// Code generated by vfsgen; DO NOT EDIT.

package istio_assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 1, 1, 0, 1, 0, 0, time.UTC),
		},
		"/istio.yaml": &vfsgen۰CompressedFileInfo{
			name:             "istio.yaml",
			modTime:          time.Date(2019, 1, 1, 0, 1, 0, 0, time.UTC),
			uncompressedSize: 2176,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\x4d\x73\xdb\x36\x10\xbd\xeb\x57\x60\x74\x27\x23\x3a\x76\x27\xc5\x8d\xe3\x2a\x53\xb5\x56\xcd\xb1\x18\x5f\x3d\x2b\x70\x23\xc3\x06\x01\x0c\xb0\xa4\x45\xa7\xf9\xef\x1d\x7e\x8a\x91\xc4\x8e\x75\x23\x16\x6f\x1f\x80\xf7\x76\x97\x60\xe5\x23\x3a\x2f\x8d\xe6\x4c\x7a\x92\x26\xdc\x82\x7e\x07\x29\x94\x29\xb2\x50\x9a\x4f\x65\xb4\x45\x82\x68\xf6\x2a\x75\xc6\xd9\xaa\x86\xcc\x72\x24\xc8\x80\x80\xcf\x18\xd3\x90\x23\x67\x39\xfa\xe7\x99\xb7\x28\xea\x50\xd9\x13\xce\xa3\xf0\x26\x8c\xe6\x33\xd6\xec\x27\x46\x49\x51\xd5\x00\xc6\x72\x52\x7e\x6d\x32\xe4\x2c\x59\x3e\xac\x57\x9b\xcd\xea\x71\x39\x63\x0c\x0a\x32\x6b\x52\x9e\x33\x72\x05\x76\x79\xcb\xbd\x05\xdd\x12\x76\x51\x61\x34\x39\xa3\x12\x05\x1a\x37\x28\x0a\x27\xa9\x5a\x6a\xd8\x2a\xcc\x06\x8c\x97\x19\x0a\x70\x2b\xfd\x82\x82\x8c\x6b\x8f\xc5\x1e\xf4\x1d\x94\xc7\x26\xe4\xf0\xcd\x49\xc2\xd8\xda\x3f\xd3\x34\x49\x9c\xd9\xe2\xc0\xc1\x98\x6c\xd2\x31\xbb\x35\x9a\x40\x6a\x74\x71\x96\x49\x92\x46\x83\x5a\xea\xf2\x11\x9c\x6f\x89\x83\x4e\x87\xd5\x26\x5d\xdd\x3f\xad\x97\x69\xfc\xd7\xe6\xfe\x9f\xa7\xe4\x2e\x4e\xbf\xde\x3f\xac\x9b\xc8\x1f\x71\x1a\x37\x60\xc6\x4a\x50\x05\x72\xf6\x6f\xb7\x64\xec\xc7\xfc\x04\x3a\xe7\x3f\xe6\x42\x15\x9e\xd0\x3d\xc9\x6c\xce\xe7\x39\xd4\xdf\xf3\x9f\x3f\xdb\x9b\xe5\xb0\x43\xce\x46\x6e\x7d\x6a\xfc\x0b\xba\x87\x07\xb2\x7f\x79\x63\x42\xb0\x7d\x17\xe1\xe7\x59\x97\x97\x14\x4a\x75\x76\xb0\x58\xbd\x41\xe5\x6b\x55\x25\x41\x86\x6a\x42\xa9\x1d\x28\x85\xd5\xe4\x26\x61\xcd\xc2\x3b\xd1\x76\x0e\x7d\xb7\x60\x2c\x87\xfd\x03\x5a\x25\x05\x78\xce\xa2\x2e\x68\x8d\xa3\x01\xd1\xab\xe7\x09\xa8\xf0\x41\xbd\x37\x28\x53\x2f\x38\x8b\x6e\x16\x57\x8b\x43\xcc\x19\x32\xc2\x28\xce\xd2\xdb\x64\x88\x12\xb8\x1d\x52\x72\x82\xef\xd9\x9f\x89\xec\xd5\x11\xef\x97\x4b\x48\xbf\x9c\x63\xf4\x47\x8c\xd7\xd7\x9f\x2f\xa0\x3c\xa0\x7b\x4e\x52\xc7\x8c\xd1\xcd\x65\x9c\x63\xfc\xc0\x2a\x6c\x00\xca\x07\xa7\xec\x37\x8b\xdf\x16\x97\x88\x30\xc6\x8f\xd9\xdf\xa5\x7d\x95\xfa\xdc\x01\xbf\x5f\x47\xd1\x25\x07\x0c\x78\xfc\xa5\x8c\x4e\x8a\xce\x4a\x65\x68\xb2\xaf\xcf\x54\xdd\x64\xcb\xb4\x4c\xbf\xf6\x89\x75\x66\xdf\x95\xfb\x74\x5e\x8d\x29\xaf\x8e\x32\x19\x2b\x3c\xae\xbb\x11\xb9\xdc\x8b\x67\xd0\x3b\xfc\x2a\x15\xa1\x1b\x4d\x16\xd4\xa5\xa9\x62\x21\xd0\xfb\x3b\xb3\xdb\xa0\x2b\xa5\xc0\x93\xb7\x0e\x70\xc6\x9e\x8d\xa7\xfa\x12\xe2\xb5\x02\x97\xf9\xda\xce\xf0\xb0\xf2\x95\x27\xcc\x43\x5f\x8a\xb0\x1b\x1a\xa1\x32\x02\xd4\x6c\xca\x6b\x12\xf6\x6f\x44\x0b\x4a\x96\xc3\xb1\x75\xeb\x12\xba\x12\x14\x67\xd1\xc2\x8f\x4d\xdb\xa2\xe7\xec\x50\x85\x24\x6b\xdf\x0f\x18\x52\x7e\x83\x44\x52\xef\xfc\x81\x2c\x6f\x06\x7c\x37\x12\xbf\xa5\xdf\xe2\xbb\x7a\xa2\xcb\x3d\x4e\x4f\xe3\x4b\x5c\x6b\x99\x8e\xb5\xcf\x0b\x45\xf2\xb6\x95\x60\x53\xd8\xf6\xe1\x9d\x8c\x84\x0a\x73\x24\x37\x35\xc6\xce\x9c\x6f\x47\x3f\xad\x8f\xe0\xc9\x81\x90\x7a\x77\x94\x30\xd8\x58\x6f\xd7\x65\xd0\x76\x4b\x13\x6a\x3f\x7b\xd5\x20\xcb\x9a\xa2\x1f\x19\xdd\x02\x3e\xe0\x35\x1f\xb7\xda\xc7\x1d\x69\xd4\xcc\xa6\x6e\xfc\x7f\x7a\xbe\xbc\x51\xff\x17\xf9\x2e\x9d\xa7\xc0\x82\xa3\x2a\x78\x79\xa3\xde\x68\x85\xde\xa7\x13\xaa\x37\x24\xff\x05\x00\x00\xff\xff\x9b\x14\xe9\x31\x80\x08\x00\x00"),
		},
		"/without-istiod.yaml": &vfsgen۰CompressedFileInfo{
			name:             "without-istiod.yaml",
			modTime:          time.Date(2019, 1, 1, 0, 1, 0, 0, time.UTC),
			uncompressedSize: 2085,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\xc1\x6e\xdb\x38\x10\xbd\xeb\x2b\x08\xdf\xa5\x5a\x69\xb2\xe8\xf2\x26\x64\x5d\xac\x77\xe3\x8d\x10\xbb\xb9\x06\x63\x6a\xea\x30\xa1\x48\x82\x1c\x29\x76\xba\xfd\xf7\x82\x92\x2c\xab\xb6\x05\xc4\x3e\x99\xc3\x37\x8f\xe4\x7b\x33\x23\xb0\xf2\x11\x9d\x97\x46\x73\x26\x3d\x49\x93\xac\x41\xbf\x83\x14\xca\x54\x45\x22\xcd\xa7\x3a\x5d\x23\x41\x1a\xbd\x4a\x5d\x70\x36\x0f\x90\xa8\x44\x82\x02\x08\x78\xc4\x98\x86\x12\x39\x2b\xd1\x3f\x47\xde\xa2\x08\xa1\x7a\x4f\x38\x49\x93\x9b\x64\x3a\x89\x58\xb3\x9f\x1b\x25\xc5\x2e\x00\x18\x2b\x49\xf9\x85\x29\x90\xb3\x7c\xf6\xb0\x98\x2f\x97\xf3\xc7\x59\xc4\x18\x54\x64\x16\xa4\x3c\x67\xe4\x2a\xec\xf2\x66\x5b\x0b\xba\x25\xec\xa2\xc2\x68\x72\x46\xe5\x0a\x34\x2e\x51\x54\x4e\xd2\x6e\xa6\x61\xad\xb0\xe8\x31\x5e\x16\x28\xc0\xcd\xf5\x0b\x0a\x32\xae\x3d\x16\x8f\x40\x8c\x39\x7c\x73\x92\x30\xb3\xf6\xef\xd5\x2a\xcf\x9d\x59\xe3\x60\x57\x36\xd9\x58\xdc\x1a\x4d\x20\x35\xba\xac\x28\x24\x49\xa3\x41\xcd\x74\xfd\x08\xce\xb7\xbc\x71\x27\xc3\x7c\xb9\x9a\xdf\x3f\x2d\x66\xab\xec\x9f\xe5\xfd\x7f\x4f\xf9\x5d\xb6\xfa\x7a\xff\xb0\x68\x22\x7f\x65\xab\xac\x01\x33\x56\x83\xaa\x90\xb3\xff\xbb\x25\x63\x3f\x26\x27\xd0\x09\xff\x31\x11\xaa\xf2\x84\xee\x49\x16\x13\x3e\x29\x21\xfc\x9f\xfc\xfc\xd9\xde\xac\x84\x0d\x72\x36\x30\xeb\x53\x63\x5f\xdc\xbd\x3b\x96\xfb\x87\x07\x0f\xd2\x78\xfd\x2e\x92\xcf\x51\x97\x97\x57\x4a\x75\x6e\xb0\x4c\xbd\xc1\xce\x07\x51\x25\x41\x81\xea\xbc\x50\x1b\x50\x0a\x77\x63\x7b\x84\x81\x83\x77\x92\x6d\x1c\xfa\x6e\xc1\x58\x09\xdb\x07\xb4\x4a\x0a\xf0\x9c\xa5\x5d\xd0\x1a\x47\x3d\x62\xaf\x9d\x27\xa0\xca\xc7\x61\xaf\xd7\x25\x2c\x38\x4b\x6f\xa6\x57\xd3\x43\xcc\x19\x32\xc2\x28\xce\x56\xb7\x79\x1f\x25\x70\x1b\xa4\xfc\x04\xbf\x67\x7f\x26\xb2\x57\x47\xbc\x5f\x2e\x21\xfd\x72\x8e\xd1\x1f\x31\x5e\x5f\x7f\xbe\x80\xf2\x80\xde\x73\x92\x3a\x66\x4c\x6f\x2e\xe3\x1c\xe2\x7b\x56\x61\x63\x50\x3e\x3e\x65\xbf\x99\xfe\x31\xbd\x44\x84\x21\x7e\xc8\xfe\x2e\xed\xab\xd4\xe7\x0e\xf8\xf3\x3a\x4d\x2f\x39\xa0\xc7\xe3\x6f\x65\xd4\xd7\xdc\x77\x50\x3e\x14\x9d\x95\xca\xd0\x58\x53\x9f\x29\xba\xd1\x7e\x69\x89\x7e\x6f\x12\xeb\xcc\xb6\x2b\xf6\xf1\xbc\x80\xa9\xaf\x8e\x32\x19\xab\x3c\x2e\xba\xf1\x38\xdb\x8a\x67\xd0\x1b\xfc\x2a\x15\xa1\x1b\xdc\x0f\x75\x6d\x76\x99\x10\xe8\xfd\x9d\xd9\x2c\xd1\xd5\x52\xe0\xe8\x53\xc3\xef\xd9\x78\x0a\xb7\x10\xaf\x3b\x70\x85\x0f\x76\x26\x87\x95\xdf\x79\xc2\x32\xf1\xb5\x48\xba\x91\x91\x28\x23\x40\x45\x63\x5e\x93\xb0\xff\x22\x5a\x50\xb2\xee\xcf\x0d\xad\x4b\xe8\x6a\x50\x9c\xa5\x53\x3f\x34\x6d\x8d\x9e\xb3\x43\x15\x92\x0c\xbe\x1f\x30\xa4\xfc\x12\x89\xa4\xde\xf8\x03\x59\xd9\x4c\xf7\x6e\x20\x7e\x5b\x7d\xcb\xee\xc2\x38\x97\x5b\xec\x46\xf1\x25\x1e\xb5\x69\xc7\x4a\x97\x95\x22\x79\xdb\xbe\x77\x59\xd9\xf6\x95\x9d\xc6\x84\x0a\x4b\x24\x37\x32\xb2\xce\x1c\x6f\x07\x5f\xa7\x33\x16\x9c\xe0\xc9\x81\x90\x7a\x33\x9a\x10\xf6\x83\xe9\x6d\x6b\x34\xa1\xf6\xef\x5e\x22\x28\x8a\xa6\xc2\x07\xae\xb6\x80\x0f\x18\xcb\x87\x7d\xf5\x71\xf9\x1b\x35\x8b\x91\x2b\xbf\xbc\xd1\xfe\x9b\xf0\x5d\x3a\x4f\xb1\x05\x47\xbb\xf8\xe5\x8d\xa2\x5f\x01\x00\x00\xff\xff\xc6\x21\x23\xda\x25\x08\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/istio.yaml"].(os.FileInfo),
		fs["/without-istiod.yaml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
