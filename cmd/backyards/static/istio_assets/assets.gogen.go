// Code generated by vfsgen; DO NOT EDIT.

package istio_assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 1, 1, 0, 1, 0, 0, time.UTC),
		},
		"/istio.yaml": &vfsgen۰CompressedFileInfo{
			name:             "istio.yaml",
			modTime:          time.Date(2019, 1, 1, 0, 1, 0, 0, time.UTC),
			uncompressedSize: 2065,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\x4d\x6f\xe3\x36\x10\xbd\xeb\x57\x0c\x7c\xb7\xd6\x4a\x93\x62\xcb\x9b\x90\x7a\x51\xb7\x71\x23\xc4\xda\x5c\x83\x31\x35\xeb\x30\xa1\x48\x81\x1c\x29\x76\xb6\xf9\xef\x85\x3e\xad\xf5\x07\x10\xdf\xc4\xe1\x9b\x47\xce\x7b\xc3\x11\x16\xea\x91\x9c\x57\xd6\x08\x50\x9e\x95\x0d\xd7\x68\xde\x51\x49\x6d\xcb\x2c\x54\xf6\x4b\x15\xad\x89\x31\x0a\x5e\x95\xc9\x04\x2c\x6a\x48\x90\x13\x63\x86\x8c\x22\x00\x30\x98\x93\x80\x9c\xfc\x73\xe0\x0b\x92\x75\xa8\xea\x09\x27\x51\x78\x13\xce\x26\x01\x34\xfb\x89\xd5\x4a\xee\x6a\x00\x40\xce\xda\x2f\x6d\x46\x02\x92\xf9\xc3\x72\xb1\x5a\x2d\x1e\xe7\x01\x00\x96\x6c\x97\xac\xbd\x00\x76\x25\x75\x79\xf3\x6d\x81\xa6\x25\xec\xa2\xd2\x1a\x76\x56\x27\x1a\x0d\xad\x48\x96\x4e\xf1\x6e\x6e\x70\xad\x29\x1b\x30\x5e\x65\x24\xd1\x2d\xcc\x0b\x49\xb6\xae\x3d\x96\x7a\xd0\x0f\xd4\x9e\x9a\x90\xa3\x37\xa7\x98\xe2\xa2\xf8\x2b\x4d\x93\xc4\xd9\x35\x0d\x1c\x00\xaa\x49\xa7\xec\xd6\x1a\x46\x65\xc8\xc5\x59\xa6\x58\x59\x83\x7a\x6e\xaa\x47\x74\xbe\x25\x9e\x76\x3a\x2c\x56\xe9\xe2\xfe\x69\x39\x4f\xe3\xbf\x57\xf7\xff\x3e\x25\x77\x71\xfa\xed\xfe\x61\xd9\x44\xfe\x8c\xd3\xb8\x01\x03\x54\xa8\x4b\x12\xf0\x5f\xb7\x04\xf8\x39\x39\x82\x4e\xc4\xcf\x89\xd4\xa5\x67\x72\x4f\x2a\x9b\x88\x49\x8e\xf5\xf7\xe4\xe3\x23\x00\x50\x39\x6e\x28\x29\xb5\xee\x44\x85\x58\xbf\xe1\xce\xd7\xda\x28\xc6\x8c\xf4\x99\x7a\x37\xa8\x35\xed\xce\x6e\x32\xd5\x2c\xa2\x2b\x7d\xe3\xc8\x77\x0b\x80\x1c\xb7\x0f\x54\x68\x25\xd1\x0b\x88\xba\x60\x61\x1d\x0f\x88\x5e\x03\xcf\xc8\xa5\x9f\xd6\x7b\x43\x7d\xf5\x42\x40\x74\x33\xbb\x9a\xed\x63\xce\xb2\x95\x56\x0b\x48\x6f\x93\x21\xca\xe8\x36\xc4\xc9\x11\xbe\x67\x7f\x66\x2e\xae\x0e\x78\xbf\x5e\x42\xfa\xf5\x14\xa3\x3f\x60\xbc\xbe\xfe\xed\x02\xca\x3d\xba\xe7\x64\x7d\xc8\x18\xdd\x5c\xc6\x39\xc6\x0f\xac\xb2\x98\xa2\xf6\xd3\x63\xf6\x9b\xd9\xef\xb3\x4b\x44\x18\xe3\xc7\xec\xef\xaa\x78\x55\xe6\xd4\x01\x7f\x5c\x47\xd1\x25\x07\x0c\x78\xfa\xa5\x8d\x8e\x9a\xae\x50\xda\xf2\xd9\xd7\x79\xa2\xeb\x9a\xd6\x17\x30\x1a\x53\x5f\x9a\xc1\x35\x6d\x99\x9a\x91\x33\x5d\xbf\xcb\xa0\xb9\xe6\xb6\x6b\xf6\xf3\x59\x35\xa6\xba\xda\xe7\x85\xad\x2e\xa5\xa7\x65\x37\xe6\xe6\x5b\xf9\x8c\x66\x43\xdf\x94\x66\x72\xa3\xe9\x40\xa6\xb2\xbb\x58\x4a\xf2\xfe\xce\x6e\x56\xe4\x2a\x25\xe9\xa8\xd2\x01\x0e\xf0\x6c\x3d\xd7\x97\x90\xaf\x3b\x74\x99\xaf\xcd\x0c\xf7\x2b\xbf\xf3\x4c\x79\xe8\x2b\x19\x76\x0f\x3f\xd4\x56\xa2\x0e\xce\x39\xcd\xb2\xf8\x87\xa8\x40\xad\xaa\xe1\xd8\xfa\xe1\x32\xb9\x0a\xb5\x80\x68\xe6\xc7\x96\xad\xc9\x0b\xd8\xf7\x20\xab\xda\xf5\x3d\x86\xb5\x5f\x11\xb3\x32\x1b\xbf\x27\xcb\x9b\x21\xdd\x8d\xb5\xef\xe9\xf7\xf8\xae\x9e\xca\x6a\x4b\xdd\x44\xbd\xc4\xa0\x36\x6d\x6c\x10\x40\x5e\x6a\x56\xb7\x6d\xb5\xab\xb2\x68\x6b\xec\x14\x63\xd2\x94\x13\xbb\x73\xf3\xea\xc4\xe9\xc5\xe8\x1f\xf3\x19\x3c\x3b\x94\xca\x6c\x0e\x12\x06\xc7\xea\xed\xda\xf1\xf6\x59\x34\xa1\xf6\xb3\x17\x08\xb3\xac\xe9\xee\x91\xa7\x2d\xe0\x13\xb6\x8a\xf1\x9b\xfa\xbc\xf8\x8d\x96\xd9\xe9\x1b\xbf\xbc\x71\xff\x43\xf8\xa1\x9c\xe7\x69\x81\x8e\x77\xd3\x97\x37\xee\x5d\xd3\xe4\x7d\x7a\x46\xd7\x86\xe4\xff\x00\x00\x00\xff\xff\x26\x4f\x15\x1a\x11\x08\x00\x00"),
		},
		"/without-istiod.yaml": &vfsgen۰CompressedFileInfo{
			name:             "without-istiod.yaml",
			modTime:          time.Date(2019, 1, 1, 0, 1, 0, 0, time.UTC),
			uncompressedSize: 1867,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\x51\x6f\xab\x3a\x0c\x7e\xe7\x57\x44\x7b\x87\x95\xdd\xf5\x6a\x97\xb7\x6a\xea\xd5\xad\xee\xaa\x83\x46\xb7\xd7\x23\x37\x78\x34\x5b\x48\xa2\xc4\xd0\xb2\x5f\x7f\x14\xa0\x94\x75\x45\x5a\xf7\x34\xec\xcf\x9f\x1d\x7f\xb6\x0b\x46\xbc\xa2\x75\x42\xab\x84\x09\x47\x42\x47\x5b\x50\x9f\x20\xb8\xd4\x55\x1e\x09\x7d\x5b\xc7\x5b\x24\x88\x83\x0f\xa1\xf2\x84\xad\x3c\x24\x28\x91\x20\x07\x82\x24\x60\x4c\x41\x89\x09\x2b\xd1\xed\x02\x67\x90\x7b\x53\x7d\x24\xbc\x89\xa3\x79\x34\xbb\x09\x58\xeb\x4f\xb5\x14\xbc\xf1\x00\xc6\x4a\x92\x6e\xad\x73\x4c\x58\xba\x7c\x5e\xaf\xb2\x6c\xf5\xba\x0c\x18\x83\x8a\xf4\x9a\xa4\x4b\x18\xd9\x0a\xfb\xb8\xe5\xc1\x80\xea\x08\x7b\x2b\xd7\x8a\xac\x96\xa9\x04\x85\x19\xf2\xca\x0a\x6a\x96\x0a\xb6\x12\xf3\x01\xe3\x44\x8e\x1c\xec\x4a\xbd\x23\x27\x6d\xbb\xb4\x78\x06\x62\xcc\xe2\xde\x0a\xc2\x85\x31\xff\x6d\x36\x69\x6a\xf5\x16\x07\xaf\x28\xa1\xc0\xb4\x92\xb2\xaf\x9c\x2d\xe4\x1e\x1a\xe7\x0b\x10\x04\x39\xca\xcb\xa4\x05\x48\x89\xcd\x94\x8f\xd0\x73\x74\x5e\xa1\x0a\x8b\xae\xff\x60\xac\x84\xc3\x33\x1a\x29\x38\xb8\x84\xc5\xbd\xd1\x68\x4b\x03\x22\xec\xdb\xed\x08\xa8\x72\xa1\xf7\xf5\x9e\x0e\x98\xb0\x78\x3e\xbb\x9b\x9d\x6c\x56\x93\xe6\x5a\x26\x6c\xf3\x98\x0e\x56\x02\x5b\x20\xa5\xdf\xf0\x47\xf6\x1d\x91\xb9\x3b\xe3\x7d\xb8\x86\xf4\xe1\x12\xa3\x3b\x63\xbc\xbf\xff\xeb\x0a\xca\x13\xfa\xc8\x49\xf2\x9c\x31\x9e\x5f\xc7\x39\xc6\x0f\xac\xdc\x84\x20\x5d\xf8\x9d\x7d\x3e\xfb\x7b\x76\x4d\x13\xc6\xf8\x31\xfb\xa7\x30\x1f\x42\x5d\x4a\xf0\xcf\x7d\x1c\x5f\x93\x60\xc0\xe3\x97\x31\x1a\x66\xee\x0d\xa4\xf3\x43\x67\x84\xd4\x34\xb5\x00\x17\x86\xae\x9d\xfb\x84\x8d\x0e\xc1\x6d\x7b\x1a\xc2\x8e\xa8\x5d\xea\x70\xfb\xc9\x83\xb6\xca\x43\x3f\xea\xd3\x51\x1e\x53\xdf\x7d\x89\x63\xac\x72\xb8\xee\xcf\xc8\xf2\xc0\x77\xa0\x0a\xfc\x57\x48\x42\x3b\xaa\x0d\x55\xad\x9b\x05\xe7\xe8\xdc\x93\x2e\x32\xb4\xb5\xe0\x38\xf9\x4c\xff\xb7\xd3\x8e\x7c\x0d\xfc\xa3\x01\x9b\x3b\x2f\x65\x74\xfa\x72\x8d\x23\x2c\x23\x57\xf3\x88\xcb\xca\x11\xda\x48\x6a\x0e\x32\x98\xd2\x99\xb8\xf9\x1f\xd1\x80\x14\xf5\x90\xd7\xaf\x2d\xa1\xad\x41\x26\x2c\x9e\xb9\xb1\x60\x5b\x74\x09\x3b\x4d\x20\x09\xaf\xf9\x09\x43\xd2\x65\x48\x24\x54\xe1\x4e\x64\x65\x7b\x05\x57\xd9\x66\xf5\xeb\xf7\xfa\x65\xf3\xb2\x78\xf2\x67\x4f\x1c\xb0\x3f\x59\xd7\xe8\xd3\x85\x7d\xed\x73\x59\x49\x12\x8f\xdd\x6b\xb3\xca\x74\x6f\xec\x3b\x4c\x28\xb1\x44\xb2\x13\xc7\xea\x42\x72\x33\xba\xe1\x17\x04\xf8\x86\x27\x0b\x5c\xa8\x62\x32\xc0\xfb\xbd\xe4\xdd\x52\xb4\xa6\xee\xdf\x63\x83\x20\xcf\xdb\xd9\x1e\x69\xda\x01\x7e\x20\x6b\x32\xde\xa8\x9f\x37\xbf\xed\x65\x3e\x51\xf2\xfb\x9e\x8e\xbf\x06\x6f\xc2\x3a\x0a\x0d\x58\x6a\xc2\xf7\x3d\x05\x7f\x02\x00\x00\xff\xff\x8d\xa5\xcc\xfc\x4b\x07\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/istio.yaml"].(os.FileInfo),
		fs["/without-istiod.yaml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
