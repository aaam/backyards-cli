// Code generated by vfsgen; DO NOT EDIT.

package istio_assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 1, 1, 0, 1, 0, 0, time.UTC),
		},
		"/istio.yaml": &vfsgen۰CompressedFileInfo{
			name:             "istio.yaml",
			modTime:          time.Date(2019, 1, 1, 0, 1, 0, 0, time.UTC),
			uncompressedSize: 1553,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\xcd\x6e\xdb\x3c\x10\xbc\xeb\x29\x16\xb9\x5b\xb1\x12\xe7\x43\x3e\xde\x8c\x20\x45\x8d\x26\xa8\x51\x3b\xbd\x16\x6b\x6a\x2b\xb3\xa1\x48\x82\xbb\x52\xec\x3c\x7d\x41\x4b\x96\x9d\x9f\x22\xf1\x4d\x1c\xce\x0e\xc9\xd9\x59\x61\x30\x3f\x29\xb2\xf1\x4e\x81\x61\x31\x3e\x5f\xa1\x7b\x46\xa3\xad\x6f\xca\xdc\xf8\xf3\xb6\x58\x91\x60\x91\x3d\x1a\x57\x2a\x98\x25\x4a\x56\x93\x60\x89\x82\x2a\x03\x70\x58\x93\x82\x9a\x78\x9d\x71\x20\x9d\xa0\x76\x2f\x78\x56\xe4\x93\xfc\xf2\x2c\x03\xa8\xc5\xb2\x82\xdf\x68\x99\x32\x00\x6c\xc4\xdf\xef\x10\x89\x4d\x02\x52\xf9\xed\x26\xa0\xeb\xea\x7a\x54\x7b\x27\xd1\xdb\xb9\x45\x47\x0b\xd2\x4d\x34\xb2\xbd\x75\xb8\xb2\x54\x0e\x1c\x36\x25\x69\x8c\x33\xf7\x87\xb4\xf8\x98\x8e\x07\x88\xf4\x14\x8d\xd0\x34\x84\xaf\xcb\xe5\x7c\x1e\xfd\x8a\x86\x02\x53\x63\x45\xf3\xc6\xda\xb9\xb7\x46\x6f\x15\x4c\xed\x13\x6e\x39\x03\xa8\x50\x28\x7d\x76\x1a\xc6\x55\x91\xb8\x5f\x00\xd4\xb8\xf9\x41\xc1\x1a\x8d\xac\xa0\xe8\xc1\xe0\xa3\x0c\x8c\x51\x6f\x05\x0b\x4a\xc3\xa3\xb4\xd7\xef\x74\x44\x05\xc5\xd5\xf8\x62\x7c\xc0\xa2\x17\xaf\xbd\x55\xb0\xbc\x99\x0f\xa8\x60\xac\x48\xe6\x6f\xf8\x7b\xf5\xb5\x48\xb8\x78\xa5\x7b\x7d\x8a\xe8\xf5\x7b\x8a\xfc\x4a\x71\x32\xb9\x3c\x41\xf2\xc0\xde\x6b\x8a\x7d\xad\x58\x5c\x9d\xa6\x79\xcc\x1f\x54\x75\x18\xa1\xe5\xd1\x5b\xf5\xab\xf1\x7f\xe3\x53\x4c\x38\xe6\x1f\xab\x3f\x9b\xf0\x68\xdc\x7b\x07\xfc\x3f\x29\x8a\x53\x0e\x18\xf8\xf4\x22\x46\xb4\x8f\xef\x7e\x14\x82\xb1\x5e\xfa\xc4\xa5\x64\x2a\x38\x9a\xbf\xf3\xdd\x44\x8e\x3a\xce\x6e\x96\x46\xab\x67\x9d\xed\x2e\xb0\xd9\x7e\x54\x95\x38\xed\xc5\x8b\x3a\x80\x86\xe9\xbe\x9f\xde\xdb\x8d\x5e\xa3\xab\xe8\x8b\xb1\x42\x71\x18\x90\x74\xc9\xd6\x6f\xa7\x5a\x13\xf3\x9d\xaf\x16\x14\x5b\xa3\xe9\xcd\x0b\x06\x3a\xc0\xda\xb3\xa4\x2b\xe8\xc7\x2d\xc6\x92\x53\x93\xf2\xc3\x8a\xb7\x2c\x54\xe7\xdc\xea\x5c\xdb\x86\x85\x62\x6e\xbd\x46\x9b\xfd\xab\x83\xa2\xc3\x37\xa2\x80\xd6\xb4\xc3\xb1\x69\x20\x85\x62\x8b\x56\x41\x31\xe6\xe3\x56\xac\x88\x15\x1c\xb2\x25\x26\x75\xf3\xc0\x11\xcb\x0b\x12\x31\xae\xe2\x83\x58\xed\x4b\x52\x30\x5b\x2c\x67\xdf\x7f\xdd\x3f\x2c\x1f\xa6\x77\xe9\x2f\x64\x36\x14\x3f\x70\xb5\xe3\xbc\xf4\xb4\x6e\xac\x98\x9b\xee\x69\x8b\x26\x74\x0f\xea\xed\x91\x88\xda\xb8\x4a\x65\xef\x7b\x97\xb6\x93\xf7\x5d\xf0\x76\x50\xf7\xb9\xbf\x2a\x96\xe5\x2e\x3f\x47\xee\x76\x84\x4f\x18\xac\x8e\x53\xfb\x59\x1b\xfe\x06\x00\x00\xff\xff\xd6\xef\xcc\x1d\x11\x06\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/istio.yaml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
