// Code generated by vfsgen; DO NOT EDIT.

package istio_assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 1, 1, 0, 1, 0, 0, time.UTC),
		},
		"/istio.yaml": &vfsgen۰CompressedFileInfo{
			name:             "istio.yaml",
			modTime:          time.Date(2019, 1, 1, 0, 1, 0, 0, time.UTC),
			uncompressedSize: 2040,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\x4d\x73\xe3\x36\x0c\xbd\xeb\x57\x60\x7c\xb7\xd6\x4a\x93\xce\x96\x37\x4d\xea\x9d\xa6\x4d\x1a\xcf\x5a\xbb\xd7\x0c\x4c\x61\x1d\x26\x14\xa9\x21\x21\xc5\xce\x36\xff\xbd\x43\x7d\x6f\x6c\xcf\xc4\x37\x11\x7c\x78\x20\xf0\x00\x08\x4b\xf5\x9d\x9c\x57\xd6\x08\x50\x9e\x95\x8d\x37\x68\x5e\x51\x49\x6d\xab\x3c\x56\xf6\x53\x9d\x6c\x88\x31\x89\x9e\x95\xc9\x05\xdc\x04\x48\x54\x10\x63\x8e\x8c\x22\x02\x30\x58\x90\x80\x82\xfc\x63\xe4\x4b\x92\xc1\x54\xf7\x84\xb3\x24\xbe\x8a\x17\xb3\x08\xa0\x60\xed\x05\xfc\x40\xed\x29\x02\xc0\x8a\xed\x5d\x63\x61\x57\x05\x43\x70\x5f\xee\x4a\x34\xad\x5f\x67\x95\xd6\xb0\xb3\x7a\xa5\xd1\xd0\x9a\x64\xe5\x14\xef\x97\x06\x37\x9a\xf2\x01\xe3\x55\x4e\x12\xdd\x8d\x79\x22\xc9\xd6\x85\xf0\x00\xd4\x83\xfa\x80\x00\x8e\x5e\x9c\x62\x4a\xcb\xf2\xaf\x2c\x5b\xad\x9c\xdd\xd0\xc0\x01\xa0\x1a\x77\xca\xaf\xad\x61\x54\x86\x5c\x9a\xe7\x8a\x95\x35\xa8\x97\xa6\xfe\x8e\xce\xb7\xc4\xf3\x2e\xdd\x9b\x75\x76\x73\xff\x70\xb7\xcc\xd2\xbf\xd7\xf7\xff\x3e\xac\x6e\xd3\xec\xcb\xfd\xd7\xbb\xc6\xf2\x67\x9a\xa5\x0d\x18\xa0\x46\x5d\x91\x80\xff\xba\x23\xc0\xcf\xd9\x01\x74\x26\x7e\xce\xa4\xae\x3c\x93\x7b\x50\xf9\x4c\xcc\x0a\x0c\xdf\xb3\xb7\xb7\x08\x40\x15\xb8\xa5\x55\xa5\xf5\xca\x6a\x25\xf7\x02\x52\xfd\x82\x7b\x1f\x6a\xa3\x18\x73\xd2\x27\xf2\xdd\xa2\xd6\xb4\x3f\x79\xc9\x14\x58\x44\x97\xfa\xd6\x91\xef\x0e\x00\x05\xee\xbe\x52\xa9\x95\x44\x2f\x20\xe9\x8c\xa5\x75\x3c\x20\xfa\x1a\x78\x46\xae\xfc\x3c\xdc\x0d\xf9\x85\x83\x80\xe4\x6a\x71\xb1\x18\x6d\xce\xb2\x95\x56\x0b\xc8\xae\x57\x83\x95\xd1\x6d\x89\x57\x07\xf8\x9e\xfd\x91\xb9\xbc\x78\xc7\xfb\xf9\x1c\xd2\xcf\xc7\x18\xfd\x3b\xc6\xcb\xcb\xdf\xce\xa0\x1c\xd1\x3d\x27\xeb\xf7\x8c\xc9\xd5\x79\x9c\x53\xfc\xc0\x2a\xcb\x39\x6a\x3f\x3f\x64\xbf\x5a\xfc\xbe\x38\xa7\x08\x53\xfc\x94\xfd\x55\x95\xcf\xca\x1c\x0b\xf0\xc7\x65\x92\x9c\x13\x60\xc0\xd3\x2f\x6d\x74\xd0\x74\xa5\xd2\x96\x4f\x4e\xe7\x91\xae\x6b\x5a\x5f\xc0\x64\x1b\x7d\x6a\xf6\xd3\xbc\x65\x6a\x36\xcb\x7c\xf3\x2a\xa3\xe6\x99\xbb\xae\xd9\x4f\x7b\x05\x4c\x7d\x31\xfa\xc5\x6d\x5d\x2a\x4f\x77\xdd\x36\x5b\xee\xe4\x23\x9a\x2d\x7d\x51\x9a\xc9\x4d\xb6\x03\x99\xda\xee\x53\x29\xc9\xfb\x5b\xbb\x5d\x93\xab\x95\xa4\x83\x4c\x07\x38\xc0\xa3\xf5\x1c\x1e\x21\x9f\xf7\xe8\x72\x1f\xc4\x8c\xc7\x93\xdf\x7b\xa6\x22\xf6\xb5\x8c\xbb\xc1\x8f\xb5\x95\xa8\xa3\x53\x4a\xb3\x2c\xff\x21\x2a\x51\xab\x7a\x08\x1b\x06\x97\xc9\xd5\xa8\x05\x24\x0b\x3f\x95\x6c\x43\x5e\xc0\xd8\x83\xac\x82\xea\x23\x86\xb5\x5f\x13\xb3\x32\x5b\x3f\x92\x15\x36\x1f\xd7\xda\xb7\xec\x5b\x7a\x1b\xb6\xb2\xda\x51\xb7\x51\xcf\x11\xa8\x75\x9b\x0a\x04\x50\x54\x9a\xd5\x75\x9b\xed\xba\x2a\xdb\x1c\xbb\x8a\x31\x69\x2a\x88\xdd\xa9\x7d\x75\x24\x7a\xd9\xae\xc3\x0f\xe3\xd9\xa1\x54\x66\xfb\xce\x61\x50\x2c\x5c\x07\xc5\xdb\xb1\x68\x4c\xed\x67\x5f\x20\xcc\xf3\xa6\xbb\x27\x9a\xb6\x80\x0f\xc8\x2a\xa6\x33\xf5\xf1\xe2\x37\xb5\xcc\x8f\xbf\xf8\xe9\x85\xfb\x1f\xc2\x0f\xe5\x3c\xcf\x4b\x74\xbc\x9f\x3f\xbd\x70\xaf\x9a\x26\xef\xb3\x13\x75\x6d\x48\xfe\x0f\x00\x00\xff\xff\xf0\x8e\xa2\x2d\xf8\x07\x00\x00"),
		},
		"/without-istiod.yaml": &vfsgen۰CompressedFileInfo{
			name:             "without-istiod.yaml",
			modTime:          time.Date(2019, 1, 1, 0, 1, 0, 0, time.UTC),
			uncompressedSize: 1842,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\x41\x6f\xdb\x3c\x0c\xbd\xfb\x57\x08\xbd\xdb\x8d\xfb\x35\x1f\x3a\xdd\x82\xa2\xc3\x82\xb5\x98\xb1\xa4\xbb\x0e\x8c\xcc\x3a\x6a\x65\x49\x90\x68\x27\xee\xaf\x1f\x64\x3b\x8e\x9b\xc6\x40\xd3\x53\x4d\x3e\x3e\x52\x7c\x24\x03\x56\xfe\x41\xe7\xa5\xd1\x9c\x49\x4f\xd2\x24\x1b\xd0\xef\x20\x85\x32\x55\x9e\x48\x73\x5d\xa7\x1b\x24\x48\xa3\x37\xa9\x73\xce\x96\x01\x12\x95\x48\x90\x03\x01\x8f\x18\xd3\x50\x22\x67\x25\xfa\x6d\xe4\x2d\x8a\x60\xaa\x0f\x84\x57\x69\x32\x4f\x66\x57\x11\x63\x25\x29\xcf\xd9\x0b\x28\x8f\x11\x63\x50\x91\x79\x6a\x2d\xe4\xaa\x60\x08\xe1\x0f\x7b\x0b\xba\x8b\xeb\xad\xc2\x68\x72\x46\x65\x0a\x34\xae\x50\x54\x4e\x52\xf3\xa0\x61\xa3\x30\x1f\x30\x5e\xe6\x28\xc0\x2d\xf5\x2b\x0a\x32\x2e\xa4\x67\x0c\x4f\x40\x8c\x39\xdc\x39\x49\xb8\xb0\xf6\xc7\x7a\x9d\x65\xce\x6c\x70\xf0\xca\x12\x0a\xcc\x2a\xa5\x32\xa3\xa4\x68\x38\x5b\xa8\x1d\x34\x3e\x14\x20\x09\x72\x54\xe7\x49\x0b\x50\x0a\x9b\x29\x1f\x61\xe0\xe8\xbc\x52\x17\x0e\x7d\xff\xc1\x58\x09\xfb\xdf\x68\x95\x14\xe0\x39\x4b\x7b\xa3\x35\x8e\x06\x44\xdc\x77\xd5\x13\x50\xe5\xe3\xe0\xeb\x3d\x1d\x90\xb3\x74\x3e\xbb\x99\x1d\x6d\xce\x90\x11\x46\x71\xb6\xbe\xcf\x06\x2b\x81\x2b\x90\xb2\x4f\xf8\x03\xfb\x96\xc8\xde\x9c\xf0\xde\x5d\x42\x7a\x77\x8e\xd1\x9f\x30\xde\xde\xfe\x77\x01\xe5\x11\x7d\xe0\x24\x75\xca\x98\xce\x2f\xe3\x1c\xe3\x07\x56\x61\x63\x50\x3e\xfe\xcc\x3e\x9f\xfd\x3f\xbb\xa4\x09\x63\xfc\x98\xfd\x5d\xda\x37\xa9\xcf\x25\xf8\x76\x9b\xa6\x97\x24\x18\xf0\xf8\x61\x8c\x86\x99\x3b\x6c\x95\x95\xca\xd0\xd4\x02\x9c\x19\xba\x76\xee\x39\x1b\xed\xfb\x75\x7b\x01\xe2\x8e\xa8\xdd\xdd\x78\xf3\x2e\xa2\xb6\xca\x7d\x3f\xea\xd3\x51\x01\x53\xdf\x7c\x88\x63\xac\xf2\xf8\xd4\x5f\x8b\x87\xbd\xd8\x82\x2e\xf0\xbb\x54\x84\x6e\x54\x1b\xea\xda\x34\x0b\x21\xd0\xfb\x47\x53\xac\xd0\xd5\x52\xe0\xe4\x33\xc3\xdf\xd6\x78\x0a\x35\x88\xb7\x06\x5c\xee\x83\x94\xc9\xf1\xcb\x37\x9e\xb0\x4c\x7c\x2d\x12\xa1\x2a\x4f\xe8\x12\x65\x04\xa8\x68\x4a\x67\x12\xf6\x27\xa2\x05\x25\xeb\x21\x6f\x58\x5b\x42\x57\x83\xe2\x2c\x9d\xf9\xb1\x60\x1b\xf4\x9c\x1d\x27\x90\x64\xd0\xfc\x88\x21\xe5\x57\x48\x24\x75\xe1\x8f\x64\xa5\xc9\x91\xb3\xe5\x6a\xbd\xfc\xf5\xf7\xe9\x79\xfd\xbc\x78\x0c\x67\x4f\xee\xb1\x3f\x59\x97\xe8\xd3\x85\x7d\xec\x73\x59\x29\x92\xf7\xdd\x6b\x57\x95\xed\xde\xd8\x77\x98\x50\x61\x89\xe4\x26\x8e\xd5\x99\xe4\xb6\xbb\x84\xd1\x84\x00\x9f\xf0\xe4\x40\x48\x5d\x4c\x06\x04\x7f\x90\xbc\x5b\x8a\xd6\xd4\xfd\x7b\x68\x10\xe4\x79\x3b\xdb\x23\x4d\x3b\xc0\x17\x64\xe5\xe3\x8d\xfa\x7a\xf3\xdb\x5e\xe6\x13\x25\xbf\xee\xe8\xf0\x6b\xf0\x22\x9d\xa7\xd8\x82\xa3\x26\x7e\xdd\x51\xf4\x2f\x00\x00\xff\xff\x67\xe1\xcc\x31\x32\x07\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/istio.yaml"].(os.FileInfo),
		fs["/without-istiod.yaml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
