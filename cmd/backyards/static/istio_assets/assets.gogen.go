// Code generated by vfsgen; DO NOT EDIT.

package istio_assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 1, 1, 0, 1, 0, 0, time.UTC),
		},
		"/istio.yaml": &vfsgen۰CompressedFileInfo{
			name:             "istio.yaml",
			modTime:          time.Date(2019, 1, 1, 0, 1, 0, 0, time.UTC),
			uncompressedSize: 2040,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\x4d\x6f\xe3\x36\x10\xbd\xeb\x57\x0c\x7c\xb7\xd6\x4a\x93\x62\xcb\x9b\x90\x7a\xd1\xb4\x49\x63\xac\xb5\x7b\x0d\xc6\xd4\xac\xc3\x84\x22\x05\x72\xa4\xd8\xd9\xe6\xbf\x17\xd4\xf7\xc6\x36\x10\xdf\xc4\xe1\x9b\x37\x9c\x37\x1f\xc2\x52\x7d\x27\xe7\x95\x35\x02\x94\x67\x65\xe3\x0d\x9a\x57\x54\x52\xdb\x2a\x8f\x95\xfd\x54\x27\x1b\x62\x4c\xa2\x67\x65\x72\x01\x37\x01\x12\x15\xc4\x98\x23\xa3\x88\x00\x0c\x16\x24\xa0\x20\xff\x18\xf9\x92\x64\x30\xd5\x3d\xe1\x2c\x89\xaf\xe2\xc5\x2c\x02\x28\x58\x7b\x01\x3f\x50\x7b\x8a\x00\xb0\x62\x7b\xd7\x58\xd8\x55\xc1\x10\xdc\x97\xbb\x12\x4d\xeb\xd7\x59\xa5\x35\xec\xac\x5e\x69\x34\xb4\x26\x59\x39\xc5\xfb\xa5\xc1\x8d\xa6\x7c\xc0\x78\x95\x93\x44\x77\x63\x9e\x48\xb2\x75\x21\x3c\x00\xf5\xa0\x3e\x20\x80\xa3\x17\xa7\x98\xd2\xb2\xfc\x2b\xcb\x56\x2b\x67\x37\x34\x70\x00\xa8\xc6\x9d\xf2\x6b\x6b\x18\x95\x21\x97\xe6\xb9\x62\x65\x0d\xea\xa5\xa9\xbf\xa3\xf3\x2d\xf1\xbc\x4b\xf7\x66\x9d\xdd\xdc\x3f\xdc\x2d\xb3\xf4\xef\xf5\xfd\xbf\x0f\xab\xdb\x34\xfb\x72\xff\xf5\xae\xb1\xfc\x99\x66\x69\x03\x06\xa8\x51\x57\x24\xe0\xbf\xee\x08\xf0\x73\x76\x00\x9d\x89\x9f\x33\xa9\x2b\xcf\xe4\x1e\x54\x3e\x13\xb3\x02\xc3\xf7\xec\xed\x2d\x02\x50\x05\x6e\x69\x55\x69\xbd\xb2\x5a\xc9\xbd\x80\x54\xbf\xe0\xde\x07\x6d\x14\x63\x4e\xfa\x44\xbe\x5b\xd4\x9a\xf6\x27\x2f\x99\x02\x8b\xe8\x52\xdf\x3a\xf2\xdd\x01\xa0\xc0\xdd\x57\x2a\xb5\x92\xe8\x05\x24\x9d\xb1\xb4\x8e\x07\x44\xaf\x81\x67\xe4\xca\xcf\xc3\xdd\x90\x5f\x38\x08\x48\xae\x16\x17\x8b\xd1\xe6\x2c\x5b\x69\xb5\x80\xec\x7a\x35\x58\x19\xdd\x96\x78\x75\x80\xef\xd9\x1f\x99\xcb\x8b\x77\xbc\x9f\xcf\x21\xfd\x7c\x8c\xd1\xbf\x63\xbc\xbc\xfc\xed\x0c\xca\x11\xdd\x73\xb2\x7e\xcf\x98\x5c\x9d\xc7\x39\xc5\x0f\xac\xb2\x9c\xa3\xf6\xf3\x43\xf6\xab\xc5\xef\x8b\x73\x44\x98\xe2\xa7\xec\xaf\xaa\x7c\x56\xe6\x58\x80\x3f\x2e\x93\xe4\x9c\x00\x03\x9e\x7e\x69\xa3\x83\xa6\x2b\x95\xb6\x7c\x72\x3a\x8f\x74\x5d\xd3\xfa\x02\x26\xdb\xe8\x53\xb3\x9f\xe6\x2d\x53\xb3\x59\xe6\x9b\x57\x19\x35\xcf\xdc\x75\xcd\x7e\xda\x2b\x60\xea\x8b\xd1\x2f\x6e\x75\xa9\x3c\xdd\x75\xdb\x6c\xb9\x93\x8f\x68\xb6\xf4\x45\x69\x26\x37\xd9\x0e\x64\x6a\xbb\x4f\xa5\x24\xef\x6f\xed\x76\x4d\xae\x56\x92\x0e\x32\x1d\xe0\x00\x8f\xd6\x73\x78\x84\x7c\xde\xa3\xcb\x7d\x28\x66\x3c\x9e\xfc\xde\x33\x15\xb1\xaf\x65\xdc\x0d\x7e\xac\xad\x44\x1d\x9d\xaa\x34\xcb\xf2\x1f\xa2\x12\xb5\xaa\x87\xb0\x61\x70\x99\x5c\x8d\x5a\x40\xb2\xf0\xd3\x92\x6d\xc8\x0b\x18\x7b\x90\x55\xa8\xfa\x88\x61\xed\xd7\xc4\xac\xcc\xd6\x8f\x64\x85\xcd\xc7\xb5\xf6\x2d\xfb\x96\xde\x86\xad\xac\x76\xd4\x6d\xd4\x73\x0a\xd4\xba\x4d\x0b\x04\x50\x54\x9a\xd5\x75\x9b\xed\xba\x2a\xdb\x1c\x3b\xc5\x98\x34\x15\xc4\xee\xfd\xbe\x1a\x04\x3d\x08\x5e\xb6\xdb\xf0\xc3\xdd\xc4\x0e\xa5\x32\xdb\x53\xfc\xe1\x3a\x14\xbc\x9d\x8a\xc6\xd4\x7e\xf6\xfa\x60\x9e\x37\xcd\x3d\x29\x69\x0b\xf8\x40\x55\xc5\x74\xa4\x3e\xae\x7d\x23\x65\x7e\xfc\xc5\x4f\x2f\xdc\xff\x0f\x7e\x28\xe7\x79\x5e\xa2\xe3\xfd\xfc\xe9\x85\xfb\xa2\x69\xf2\x3e\x3b\x21\x6b\xab\xd3\xff\x01\x00\x00\xff\xff\xf3\xd0\xbd\x41\xf8\x07\x00\x00"),
		},
		"/without-istiod.yaml": &vfsgen۰CompressedFileInfo{
			name:             "without-istiod.yaml",
			modTime:          time.Date(2019, 1, 1, 0, 1, 0, 0, time.UTC),
			uncompressedSize: 1842,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\x41\x6f\xdb\x3c\x0c\xbd\xfb\x57\x08\xbd\xdb\x8d\xfb\x35\x1f\x3a\xdd\x82\xa2\xc3\x82\xb5\x98\xb1\xa4\xbb\x0e\x8c\xcc\x3a\x6a\x65\x49\x90\x68\x27\xee\xaf\x1f\x64\x3b\x8e\x9b\xc6\x40\xd3\x53\x4d\x3e\x3e\x52\x7c\x24\x03\x56\xfe\x41\xe7\xa5\xd1\x9c\x49\x4f\xd2\x24\x1b\xd0\xef\x20\x85\x32\x55\x9e\x48\x73\x5d\xa7\x1b\x24\x48\xa3\x37\xa9\x73\xce\x96\x01\x12\x95\x48\x90\x03\x01\x8f\x18\xd3\x50\x22\x67\x25\xfa\x6d\xe4\x2d\x8a\x60\xaa\x0f\x84\x57\x69\x32\x4f\x66\x57\x11\x63\x25\x29\xcf\xd9\x0b\x28\x8f\x11\x63\x50\x91\x79\x6a\x2d\xe4\xaa\x60\x08\xe1\x0f\x7b\x0b\xba\x8b\xeb\xad\xc2\x68\x72\x46\x65\x0a\x34\xae\x50\x54\x4e\x52\xf3\xa0\x61\xa3\x30\x1f\x30\x5e\xe6\x28\xc0\x2d\xf5\x2b\x0a\x32\x2e\xa4\x67\x0c\x4f\x40\x8c\x39\xdc\x39\x49\xb8\xb0\xf6\xc7\x7a\x9d\x65\xce\x6c\x70\xf0\xca\x12\x0a\xcc\x2a\xa5\x32\xa3\xa4\x68\x38\x5b\xa8\x1d\x34\x3e\x14\x20\x09\x72\x54\xe7\x49\x0b\x50\x0a\x9b\x29\x1f\x61\xe0\xe8\xbc\x52\x17\x0e\x7d\xff\xc1\x58\x09\xfb\xdf\x68\x95\x14\xe0\x39\x4b\x7b\xa3\x35\x8e\x06\x44\xdc\x77\xd5\x13\x50\xe5\xe3\xe0\xeb\x3d\x1d\x90\xb3\x74\x3e\xbb\x99\x1d\x6d\xce\x90\x11\x46\x71\xb6\xbe\xcf\x06\x2b\x81\x2b\x90\xb2\x4f\xf8\x03\xfb\x96\xc8\xde\x9c\xf0\xde\x5d\x42\x7a\x77\x8e\xd1\x9f\x30\xde\xde\xfe\x77\x01\xe5\x11\x7d\xe0\x24\x75\xca\x98\xce\x2f\xe3\x1c\xe3\x07\x56\x61\x63\x50\x3e\xfe\xcc\x3e\x9f\xfd\x3f\xbb\xa4\x09\x63\xfc\x98\xfd\x5d\xda\x37\xa9\xcf\x25\xf8\x76\x9b\xa6\x97\x24\x18\xf0\xf8\x61\x8c\x86\x99\x3b\x6c\x95\x95\xca\xd0\xd4\x02\x9c\x19\xba\x76\xee\x39\x1b\xed\xfb\x75\x7b\x01\xe2\x8e\xa8\xdd\xdd\x78\xf3\x2e\xa2\xb6\xca\x7d\x3f\xea\xd3\x51\x01\x53\xdf\x7c\x88\x63\xac\xf2\xf8\xd4\x5f\x8b\x87\xbd\xd8\x82\x2e\xf0\xbb\x54\x84\x6e\x54\x1b\xea\xda\x34\x0b\x21\xd0\xfb\x47\x53\xac\xd0\xd5\x52\xe0\xe4\x33\xc3\xdf\xd6\x78\x0a\x35\x88\xb7\x06\x5c\xee\x83\x94\xc9\xf1\xcb\x37\x9e\xb0\x4c\x7c\x2d\x12\xa1\x2a\x4f\xe8\x12\x65\x04\xa8\x68\x4a\x67\x12\xf6\x27\xa2\x05\x25\xeb\x21\x6f\x58\x5b\x42\x57\x83\xe2\x2c\x9d\xf9\xb1\x60\x1b\xf4\x9c\x1d\x27\x90\x64\xd0\xfc\x88\x21\xe5\x57\x48\x24\x75\xe1\x8f\x64\xa5\xc9\x91\xb3\xe5\x6a\xbd\xfc\xf5\xf7\xe9\x79\xfd\xbc\x78\x0c\x67\x4f\xee\xb1\x3f\x59\x97\xe8\xd3\x85\x7d\xec\x73\x59\x29\x92\xf7\xdd\x6b\x57\x95\xed\xde\xd8\x77\x98\x50\x61\x89\xe4\x26\x8e\xd5\x99\xe4\xb6\xbb\x84\xd1\x84\x00\x9f\xf0\xe4\x40\x48\x5d\x4c\x06\x04\x7f\x90\xbc\x5b\x8a\xd6\xd4\xfd\x7b\x68\x10\xe4\x79\x3b\xdb\x23\x4d\x3b\xc0\x17\x64\xe5\xe3\x8d\xfa\x7a\xf3\xdb\x5e\xe6\x13\x25\xbf\xee\xe8\xf0\x6b\xf0\x22\x9d\xa7\xd8\x82\xa3\x26\x7e\xdd\x51\xf4\x2f\x00\x00\xff\xff\x67\xe1\xcc\x31\x32\x07\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/istio.yaml"].(os.FileInfo),
		fs["/without-istiod.yaml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
