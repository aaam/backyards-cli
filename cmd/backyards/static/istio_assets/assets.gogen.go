// Code generated by vfsgen; DO NOT EDIT.

package istio_assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 1, 1, 0, 1, 0, 0, time.UTC),
		},
		"/istio.yaml": &vfsgen۰CompressedFileInfo{
			name:             "istio.yaml",
			modTime:          time.Date(2019, 1, 1, 0, 1, 0, 0, time.UTC),
			uncompressedSize: 1884,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\x4b\x6f\xe3\x38\x0c\xbe\xfb\x57\x08\xbd\xdb\x8d\xbb\xcd\xa2\xeb\x5b\x50\x74\xb1\xc1\xb6\x98\x60\x92\xce\x75\xc0\xc8\xac\xa3\x56\x96\x04\x91\x76\xe2\xfe\xfa\x81\xfc\x4a\x9a\x07\xd0\xdc\x62\xf2\xe3\x47\xea\xe3\x23\xe0\xd4\x2f\xf4\xa4\xac\xc9\x84\x22\x56\x36\x59\x83\xf9\x04\x25\xb5\xad\xf2\x44\xd9\xdb\x3a\x5d\x23\x43\x1a\x7d\x28\x93\x67\x62\x1e\x20\x51\x89\x0c\x39\x30\x64\x91\x10\x06\x4a\xcc\x44\x89\xb4\x89\xc8\xa1\x0c\xa6\x7a\x20\xbc\x49\x93\x69\x32\xb9\x89\x84\x28\x59\x53\x26\xde\x40\x13\x46\x42\x40\xc5\xf6\xa5\xb5\xb0\xaf\x82\x21\x84\x3f\xed\x1c\x98\x2e\xae\xb7\x4a\x6b\xd8\x5b\xbd\xd0\x60\x70\x89\xb2\xf2\x8a\x9b\x27\x03\x6b\x8d\xf9\x88\x21\x95\xa3\x04\x3f\x37\xef\x28\xd9\xfa\x90\x5e\x08\x1c\x40\x43\x42\x21\x3c\x6e\xbd\x62\x9c\x39\xf7\xdf\x6a\xb5\x58\x78\xbb\xc6\x91\x43\x95\x50\xe0\xa2\xd2\x7a\x61\xb5\x92\x4d\x26\x66\x7a\x0b\x0d\x85\x0a\x14\x43\x8e\xfa\x02\x6b\x01\x5a\x63\x73\xd1\xc9\x18\x58\x3a\xb7\x32\x85\x47\xea\x3f\x84\x28\x61\xf7\x13\x9d\x56\x12\x28\x13\x69\x6f\x74\xd6\xf3\x88\x88\x7b\x61\x89\x81\x2b\x8a\x83\xaf\xf7\x74\xc0\x4c\xa4\xd3\xc9\xdd\x64\x6f\xf3\x96\xad\xb4\x3a\x13\xab\xc7\xc5\x68\x65\xf0\x05\xf2\xe2\x04\x3f\xb0\x6f\x98\xdd\xdd\x11\xef\xc3\x35\xa4\x0f\xe7\x18\xe9\x88\xf1\xfe\xfe\xaf\x2b\x28\xf7\xe8\x81\x93\xf5\x31\x63\x3a\xbd\x8e\xf3\x10\x3f\xb2\x4a\x17\x83\xa6\xf8\x94\x7d\x3a\xf9\x7b\x72\x8d\x08\x87\xf8\x43\xf6\x4f\xe5\x3e\x94\x39\x97\xe0\x9f\xfb\x34\xbd\x26\xc1\x88\xc7\x2f\x63\x74\x32\x74\x4e\x69\xcb\x17\x77\xe0\xcc\xd4\xb5\xa3\x9f\x89\x83\x9d\xbf\x6d\xaf\x40\xdc\x31\xb5\xfb\x1b\xaf\x3f\x65\xd4\x96\xb9\xeb\x87\xfd\x72\x54\xc0\xd4\x77\x5f\xe2\x84\xa8\x08\x5f\xfa\x8b\xf1\xb4\x93\x1b\x30\x05\xfe\xab\x34\xa3\x1f\x37\x30\x94\x5b\xdb\x66\x26\x25\x12\x3d\xdb\x62\x89\xbe\x56\x12\x4f\xde\x39\xc2\x85\xd8\x58\xe2\x50\x82\xfc\x68\xc0\xe7\x14\x5a\x99\xec\xbf\xa8\x21\xc6\x32\xa1\x5a\x26\x52\x57\xc4\xe8\x13\x6d\x25\xe8\xe8\x52\x9f\x59\xba\xff\x11\x1d\x68\x55\x8f\x69\xc3\xda\x32\xfa\x1a\x74\x26\xd2\x09\x1d\x36\x6c\x8d\x94\x89\xfd\x04\xb2\x0a\x3d\xdf\x63\x58\xd3\x12\x99\x95\x29\x68\x4f\x56\xda\x1c\x33\x31\x5f\xae\xe6\x3f\x7e\xbf\xbc\xae\x5e\x67\xcf\xe1\xf2\xa9\x1d\xf6\x57\xeb\x9a\xf6\x74\x61\x5f\x65\x2e\x2b\xcd\xea\xb1\x7b\xed\xb2\x72\xdd\x1b\x7b\xc5\x18\x35\x96\xc8\xfe\xf8\x5a\x8d\x82\x9e\x24\x77\xdd\x2d\xfc\xf6\x2c\xb1\x07\xa9\x4c\x71\x89\x3f\xb8\x43\xc3\xbb\x9d\x68\x4d\xdd\xcf\x41\x1f\xc8\xf3\x76\xb4\x0f\x5a\xda\x01\xbe\xd1\xd5\xec\x70\xa1\xbe\xaf\x7d\x2b\x65\x7e\xbe\xe2\xf7\x2d\x0f\xff\x06\x6f\xca\x13\xc7\x0e\x3c\x37\xf1\xfb\x96\x87\xa6\x69\x24\x5a\x5d\x90\xb5\xd3\xe9\x4f\x00\x00\x00\xff\xff\xb4\xf3\x45\xf8\x5c\x07\x00\x00"),
		},
		"/without-istiod.yaml": &vfsgen۰CompressedFileInfo{
			name:             "without-istiod.yaml",
			modTime:          time.Date(2019, 1, 1, 0, 1, 0, 0, time.UTC),
			uncompressedSize: 1842,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\x41\x6f\xdb\x3c\x0c\xbd\xfb\x57\x08\xbd\xdb\x8d\xfb\x35\x1f\x3a\xdd\x82\xa2\xc3\x82\xb5\x98\xb1\xa4\xbb\x0e\x8c\xcc\x3a\x6a\x65\x49\x90\x68\x27\xee\xaf\x1f\x64\x3b\x8e\x9b\xc6\x40\xd3\x53\x4d\x3e\x3e\x52\x7c\x24\x03\x56\xfe\x41\xe7\xa5\xd1\x9c\x49\x4f\xd2\x24\x1b\xd0\xef\x20\x85\x32\x55\x9e\x48\x73\x5d\xa7\x1b\x24\x48\xa3\x37\xa9\x73\xce\x96\x01\x12\x95\x48\x90\x03\x01\x8f\x18\xd3\x50\x22\x67\x25\xfa\x6d\xe4\x2d\x8a\x60\xaa\x0f\x84\x57\x69\x32\x4f\x66\x57\x11\x63\x25\x29\xcf\xd9\x0b\x28\x8f\x11\x63\x50\x91\x79\x6a\x2d\xe4\xaa\x60\x08\xe1\x0f\x7b\x0b\xba\x8b\xeb\xad\xc2\x68\x72\x46\x65\x0a\x34\xae\x50\x54\x4e\x52\xf3\xa0\x61\xa3\x30\x1f\x30\x5e\xe6\x28\xc0\x2d\xf5\x2b\x0a\x32\x2e\xa4\x67\x0c\x4f\x40\x8c\x39\xdc\x39\x49\xb8\xb0\xf6\xc7\x7a\x9d\x65\xce\x6c\x70\xf0\xca\x12\x0a\xcc\x2a\xa5\x32\xa3\xa4\x68\x38\x5b\xa8\x1d\x34\x3e\x14\x20\x09\x72\x54\xe7\x49\x0b\x50\x0a\x9b\x29\x1f\x61\xe0\xe8\xbc\x52\x17\x0e\x7d\xff\xc1\x58\x09\xfb\xdf\x68\x95\x14\xe0\x39\x4b\x7b\xa3\x35\x8e\x06\x44\xdc\x77\xd5\x13\x50\xe5\xe3\xe0\xeb\x3d\x1d\x90\xb3\x74\x3e\xbb\x99\x1d\x6d\xce\x90\x11\x46\x71\xb6\xbe\xcf\x06\x2b\x81\x2b\x90\xb2\x4f\xf8\x03\xfb\x96\xc8\xde\x9c\xf0\xde\x5d\x42\x7a\x77\x8e\xd1\x9f\x30\xde\xde\xfe\x77\x01\xe5\x11\x7d\xe0\x24\x75\xca\x98\xce\x2f\xe3\x1c\xe3\x07\x56\x61\x63\x50\x3e\xfe\xcc\x3e\x9f\xfd\x3f\xbb\xa4\x09\x63\xfc\x98\xfd\x5d\xda\x37\xa9\xcf\x25\xf8\x76\x9b\xa6\x97\x24\x18\xf0\xf8\x61\x8c\x86\x99\x3b\x6c\x95\x95\xca\xd0\xd4\x02\x9c\x19\xba\x76\xee\x39\x1b\xed\xfb\x75\x7b\x01\xe2\x8e\xa8\xdd\xdd\x78\xf3\x2e\xa2\xb6\xca\x7d\x3f\xea\xd3\x51\x01\x53\xdf\x7c\x88\x63\xac\xf2\xf8\xd4\x5f\x8b\x87\xbd\xd8\x82\x2e\xf0\xbb\x54\x84\x6e\x54\x1b\xea\xda\x34\x0b\x21\xd0\xfb\x47\x53\xac\xd0\xd5\x52\xe0\xe4\x33\xc3\xdf\xd6\x78\x0a\x35\x88\xb7\x06\x5c\xee\x83\x94\xc9\xf1\xcb\x37\x9e\xb0\x4c\x7c\x2d\x12\xa1\x2a\x4f\xe8\x12\x65\x04\xa8\x68\x4a\x67\x12\xf6\x27\xa2\x05\x25\xeb\x21\x6f\x58\x5b\x42\x57\x83\xe2\x2c\x9d\xf9\xb1\x60\x1b\xf4\x9c\x1d\x27\x90\x64\xd0\xfc\x88\x21\xe5\x57\x48\x24\x75\xe1\x8f\x64\xa5\xc9\x91\xb3\xe5\x6a\xbd\xfc\xf5\xf7\xe9\x79\xfd\xbc\x78\x0c\x67\x4f\xee\xb1\x3f\x59\x97\xe8\xd3\x85\x7d\xec\x73\x59\x29\x92\xf7\xdd\x6b\x57\x95\xed\xde\xd8\x77\x98\x50\x61\x89\xe4\x26\x8e\xd5\x99\xe4\xb6\xbb\x84\xd1\x84\x00\x9f\xf0\xe4\x40\x48\x5d\x4c\x06\x04\x7f\x90\xbc\x5b\x8a\xd6\xd4\xfd\x7b\x68\x10\xe4\x79\x3b\xdb\x23\x4d\x3b\xc0\x17\x64\xe5\xe3\x8d\xfa\x7a\xf3\xdb\x5e\xe6\x13\x25\xbf\xee\xe8\xf0\x6b\xf0\x22\x9d\xa7\xd8\x82\xa3\x26\x7e\xdd\x51\xf4\x2f\x00\x00\xff\xff\x67\xe1\xcc\x31\x32\x07\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/istio.yaml"].(os.FileInfo),
		fs["/without-istiod.yaml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
