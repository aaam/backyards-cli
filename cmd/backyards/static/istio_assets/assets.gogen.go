// Code generated by vfsgen; DO NOT EDIT.

package istio_assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 1, 1, 0, 1, 0, 0, time.UTC),
		},
		"/istio.yaml": &vfsgen۰CompressedFileInfo{
			name:             "istio.yaml",
			modTime:          time.Date(2019, 1, 1, 0, 1, 0, 0, time.UTC),
			uncompressedSize: 596,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xcd\x6e\xdb\x30\x10\x84\xef\x7a\x8a\x45\xee\x56\x2a\x20\x97\xf2\x16\x14\x01\x9a\x43\x01\xa1\x09\x7a\x5f\x91\x5b\x77\x6b\xfe\x61\xb9\x4c\x2c\x3f\x7d\x41\xd1\x76\xdd\x5e\x72\xa3\x3e\xcd\x0c\x39\x83\x99\x7f\x90\x14\x4e\xd1\x00\x17\xe5\x34\x2e\x18\x4f\xc8\xd6\xa7\xea\x46\x4e\xf7\x6f\xd3\x42\x8a\xd3\x70\xe0\xe8\x0c\x3c\x37\xc9\x10\x48\xd1\xa1\xa2\x19\x00\x22\x06\x32\x10\xa8\xfc\x1a\x4a\x26\xdb\xd0\xdb\x25\xf0\x6e\x1a\x1f\xc6\x4f\x77\x03\x40\x50\x5f\x0c\xfc\x44\x5f\x68\x00\xc0\xaa\xe9\xdb\x46\x54\x6a\x03\xcd\xfe\x74\xcc\x18\xbb\xef\x4c\x6d\x8a\x2a\xc9\xcf\x1e\x23\xbd\x90\xad\xc2\xba\x3e\x45\x5c\x3c\xb9\xab\xa6\xb0\x23\x8b\xf2\x1c\x7f\x93\xd5\x24\xed\x7a\x00\xa1\x77\x61\xa5\xc7\x9c\xbf\xbe\xbe\xce\xb3\xa4\x85\xae\x06\x0e\xb8\xa7\xb9\x7a\x3f\x27\xcf\x76\x35\xf0\xe8\xdf\x71\x2d\x03\xc0\x1e\x95\xda\xb1\x67\x70\xdc\x0b\x95\xf3\x07\x40\xc0\xe3\x77\xca\x9e\x2d\x16\x03\xd3\x06\xe9\x1f\x01\x5d\x1e\x76\x29\x99\xd9\x27\x3d\x67\xb5\x3b\x0d\xdc\x2c\x7b\xbf\x6d\xbd\xeb\x9a\x6d\xa5\xdd\x72\xb2\x6d\x09\x3e\x92\x7c\xe0\xea\x9a\x5b\x17\x40\xa8\x5e\xf9\x8b\xaf\x45\x49\x5e\x6a\xce\x49\xf4\x5a\x59\x05\x2d\xc7\x7d\x4f\xa5\xff\x06\xec\xbf\x49\x0c\x9c\x38\x1f\x38\x6e\xa8\x1f\x2f\xd5\xd0\xb9\xad\x29\x2c\x68\x0f\x2b\x8a\x2b\xbb\x2e\x18\xff\x82\xb2\x16\xa5\x60\x3e\x3f\x4c\xd3\xf0\x27\x00\x00\xff\xff\xd5\xaf\x29\x0a\x54\x02\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/istio.yaml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
